// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `kotlin.jvm.JvmClassMappingKt`
class JvmClassMappingKt extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<JvmClassMappingKt> $type;

  @jni$_.internal
  JvmClassMappingKt.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(r'kotlin/jvm/JvmClassMappingKt');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $JvmClassMappingKt$NullableType();
  static const type = $JvmClassMappingKt$Type();
  static final _id_getJavaClass = _class.staticMethodId(
    r'getJavaClass',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/Class;',
  );

  static final _getJavaClass = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.Class getJavaClass(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getJavaClass<$T extends jni$_.JObject?>(
    jni$_.JObject kClass, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    return _getJavaClass(_class.reference.pointer,
            _id_getJavaClass as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getJavaPrimitiveType = _class.staticMethodId(
    r'getJavaPrimitiveType',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/Class;',
  );

  static final _getJavaPrimitiveType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.Class getJavaPrimitiveType(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject? getJavaPrimitiveType<$T extends jni$_.JObject?>(
    jni$_.JObject kClass, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    return _getJavaPrimitiveType(_class.reference.pointer,
            _id_getJavaPrimitiveType as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JObject?>(const jni$_.JObjectNullableType());
  }

  static final _id_getJavaObjectType = _class.staticMethodId(
    r'getJavaObjectType',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/Class;',
  );

  static final _getJavaObjectType = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.Class getJavaObjectType(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getJavaObjectType<$T extends jni$_.JObject?>(
    jni$_.JObject kClass, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    return _getJavaObjectType(_class.reference.pointer,
            _id_getJavaObjectType as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getKotlinClass = _class.staticMethodId(
    r'getKotlinClass',
    r'(Ljava/lang/Class;)Lkotlin/reflect/KClass;',
  );

  static final _getKotlinClass = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final kotlin.reflect.KClass getKotlinClass(java.lang.Class class)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getKotlinClass<$T extends jni$_.JObject?>(
    jni$_.JObject class$, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$class$ = class$.reference;
    return _getKotlinClass(_class.reference.pointer,
            _id_getKotlinClass as jni$_.JMethodIDPtr, _$class$.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getJavaClass$1 = _class.staticMethodId(
    r'getJavaClass',
    r'(Ljava/lang/Object;)Ljava/lang/Class;',
  );

  static final _getJavaClass$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.Class getJavaClass(T object)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getJavaClass$1<$T extends jni$_.JObject?>(
    $T object, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _getJavaClass$1(_class.reference.pointer,
            _id_getJavaClass$1 as jni$_.JMethodIDPtr, _$object.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getRuntimeClassOfKClassInstance = _class.staticMethodId(
    r'getRuntimeClassOfKClassInstance',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/Class;',
  );

  static final _getRuntimeClassOfKClassInstance =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.Class getRuntimeClassOfKClassInstance(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject
      getRuntimeClassOfKClassInstance<$T extends jni$_.JObject?>(
    jni$_.JObject kClass, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    return _getRuntimeClassOfKClassInstance(
            _class.reference.pointer,
            _id_getRuntimeClassOfKClassInstance as jni$_.JMethodIDPtr,
            _$kClass.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_isArrayOf = _class.staticMethodId(
    r'isArrayOf',
    r'([Ljava/lang/Object;)Z',
  );

  static final _isArrayOf = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic static public final boolean isArrayOf(java.lang.Object[] objects)`
  static bool isArrayOf(
    jni$_.JArray<jni$_.JObject?>? objects,
  ) {
    final _$objects = objects?.reference ?? jni$_.jNullReference;
    return _isArrayOf(_class.reference.pointer,
            _id_isArrayOf as jni$_.JMethodIDPtr, _$objects.pointer)
        .boolean;
  }

  static final _id_getAnnotationClass = _class.staticMethodId(
    r'getAnnotationClass',
    r'(Ljava/lang/annotation/Annotation;)Lkotlin/reflect/KClass;',
  );

  static final _getAnnotationClass = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final kotlin.reflect.KClass getAnnotationClass(T annotation)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getAnnotationClass<$T extends jni$_.JObject?>(
    $T annotation, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$annotation = annotation?.reference ?? jni$_.jNullReference;
    return _getAnnotationClass(_class.reference.pointer,
            _id_getAnnotationClass as jni$_.JMethodIDPtr, _$annotation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }
}

final class $JvmClassMappingKt$NullableType
    extends jni$_.JObjType<JvmClassMappingKt?> {
  @jni$_.internal
  const $JvmClassMappingKt$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lkotlin/jvm/JvmClassMappingKt;';

  @jni$_.internal
  @core$_.override
  JvmClassMappingKt? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : JvmClassMappingKt.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JvmClassMappingKt?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JvmClassMappingKt$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JvmClassMappingKt$NullableType) &&
        other is $JvmClassMappingKt$NullableType;
  }
}

final class $JvmClassMappingKt$Type extends jni$_.JObjType<JvmClassMappingKt> {
  @jni$_.internal
  const $JvmClassMappingKt$Type();

  @jni$_.internal
  @core$_.override
  String get signature => r'Lkotlin/jvm/JvmClassMappingKt;';

  @jni$_.internal
  @core$_.override
  JvmClassMappingKt fromReference(jni$_.JReference reference) =>
      JvmClassMappingKt.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<JvmClassMappingKt?> get nullableType =>
      const $JvmClassMappingKt$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($JvmClassMappingKt$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($JvmClassMappingKt$Type) &&
        other is $JvmClassMappingKt$Type;
  }
}
