// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../../../java/time/Instant.dart' as instant$_;

import 'DataOrigin.dart' as dataorigin$_;

import 'Device.dart' as device$_;

/// from: `androidx.health.connect.client.records.metadata.Metadata$Companion$RecordingMethod`
class Metadata$Companion$RecordingMethod extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Metadata$Companion$RecordingMethod> $type;

  @jni$_.internal
  Metadata$Companion$RecordingMethod.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/metadata/Metadata$Companion$RecordingMethod');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $Metadata$Companion$RecordingMethod$NullableType();
  static const type = $Metadata$Companion$RecordingMethod$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $Metadata$Companion$RecordingMethod> _$impls =
      {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $Metadata$Companion$RecordingMethod $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.records.metadata.Metadata$Companion$RecordingMethod',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory Metadata$Companion$RecordingMethod.implement(
    $Metadata$Companion$RecordingMethod $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return Metadata$Companion$RecordingMethod.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $Metadata$Companion$RecordingMethod {
  factory $Metadata$Companion$RecordingMethod() =
      _$Metadata$Companion$RecordingMethod;
}

final class _$Metadata$Companion$RecordingMethod
    with $Metadata$Companion$RecordingMethod {
  _$Metadata$Companion$RecordingMethod();
}

final class $Metadata$Companion$RecordingMethod$NullableType
    extends jni$_.JObjType<Metadata$Companion$RecordingMethod?> {
  @jni$_.internal
  const $Metadata$Companion$RecordingMethod$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata$Companion$RecordingMethod;';

  @jni$_.internal
  @core$_.override
  Metadata$Companion$RecordingMethod? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Metadata$Companion$RecordingMethod.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata$Companion$RecordingMethod?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($Metadata$Companion$RecordingMethod$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($Metadata$Companion$RecordingMethod$NullableType) &&
        other is $Metadata$Companion$RecordingMethod$NullableType;
  }
}

final class $Metadata$Companion$RecordingMethod$Type
    extends jni$_.JObjType<Metadata$Companion$RecordingMethod> {
  @jni$_.internal
  const $Metadata$Companion$RecordingMethod$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata$Companion$RecordingMethod;';

  @jni$_.internal
  @core$_.override
  Metadata$Companion$RecordingMethod fromReference(
          jni$_.JReference reference) =>
      Metadata$Companion$RecordingMethod.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata$Companion$RecordingMethod?> get nullableType =>
      const $Metadata$Companion$RecordingMethod$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Metadata$Companion$RecordingMethod$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Metadata$Companion$RecordingMethod$Type) &&
        other is $Metadata$Companion$RecordingMethod$Type;
  }
}

/// from: `androidx.health.connect.client.records.metadata.Metadata$Companion`
class Metadata$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Metadata$Companion> $type;

  @jni$_.internal
  Metadata$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/metadata/Metadata$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Metadata$Companion$NullableType();
  static const type = $Metadata$Companion$Type();
  static final _id_activelyRecorded = _class.instanceMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata activelyRecorded(
    device$_.Device device,
  ) {
    final _$device = device.reference;
    return _activelyRecorded(reference.pointer,
            _id_activelyRecorded as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecorded$1 = _class.instanceMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata activelyRecorded$1(
    device$_.Device device,
    jni$_.JString string,
    int j,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _activelyRecorded$1(
            reference.pointer,
            _id_activelyRecorded$1 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecordedWithId = _class.instanceMethodId(
    r'activelyRecordedWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecordedWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata activelyRecordedWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata activelyRecordedWithId(
    jni$_.JString string,
    device$_.Device device,
  ) {
    final _$string = string.reference;
    final _$device = device.reference;
    return _activelyRecordedWithId(
            reference.pointer,
            _id_activelyRecordedWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded = _class.instanceMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata autoRecorded(
    device$_.Device device,
  ) {
    final _$device = device.reference;
    return _autoRecorded(reference.pointer,
            _id_autoRecorded as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded$1 = _class.instanceMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata autoRecorded$1(
    device$_.Device device,
    jni$_.JString string,
    int j,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _autoRecorded$1(
            reference.pointer,
            _id_autoRecorded$1 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecordedWithId = _class.instanceMethodId(
    r'autoRecordedWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecordedWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata autoRecordedWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata autoRecordedWithId(
    jni$_.JString string,
    device$_.Device device,
  ) {
    final _$string = string.reference;
    final _$device = device.reference;
    return _autoRecordedWithId(
            reference.pointer,
            _id_autoRecordedWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry = _class.instanceMethodId(
    r'manualEntry',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntry(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntry(
    device$_.Device? device,
  ) {
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntry(reference.pointer,
            _id_manualEntry as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$1 = _class.instanceMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string, long j, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntry$1(
    jni$_.JString string,
    int j,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntry$1(
            reference.pointer,
            _id_manualEntry$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntryWithId = _class.instanceMethodId(
    r'manualEntryWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntryWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntryWithId(
    jni$_.JString string,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntryWithId(
            reference.pointer,
            _id_manualEntryWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod = _class.instanceMethodId(
    r'unknownRecordingMethod',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethod(
    device$_.Device? device,
  ) {
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethod(reference.pointer,
            _id_unknownRecordingMethod as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$1 = _class.instanceMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string, long j, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethod$1(
    jni$_.JString string,
    int j,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethod$1(
            reference.pointer,
            _id_unknownRecordingMethod$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethodWithId = _class.instanceMethodId(
    r'unknownRecordingMethodWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethodWithId =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethodWithId(
    jni$_.JString string,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethodWithId(
            reference.pointer,
            _id_unknownRecordingMethodWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecorded$2 = _class.instanceMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata activelyRecorded$2(
    device$_.Device device,
    jni$_.JString string,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _activelyRecorded$2(
            reference.pointer,
            _id_activelyRecorded$2 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded$2 = _class.instanceMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata autoRecorded$2(
    device$_.Device device,
    jni$_.JString string,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _autoRecorded$2(
            reference.pointer,
            _id_autoRecorded$2 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$2 = _class.instanceMethodId(
    r'manualEntry',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntry()`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntry$2() {
    return _manualEntry$2(
            reference.pointer, _id_manualEntry$2 as jni$_.JMethodIDPtr)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$3 = _class.instanceMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntry$3(
    jni$_.JString string,
    int j,
  ) {
    final _$string = string.reference;
    return _manualEntry$3(reference.pointer,
            _id_manualEntry$3 as jni$_.JMethodIDPtr, _$string.pointer, j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$4 = _class.instanceMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntry$4(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _manualEntry$4(reference.pointer,
            _id_manualEntry$4 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntryWithId$1 = _class.instanceMethodId(
    r'manualEntryWithId',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntryWithId$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata manualEntryWithId$1(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _manualEntryWithId$1(reference.pointer,
            _id_manualEntryWithId$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$2 = _class.instanceMethodId(
    r'unknownRecordingMethod',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod()`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethod$2() {
    return _unknownRecordingMethod$2(reference.pointer,
            _id_unknownRecordingMethod$2 as jni$_.JMethodIDPtr)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$3 = _class.instanceMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethod$3(
    jni$_.JString string,
    int j,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethod$3(
            reference.pointer,
            _id_unknownRecordingMethod$3 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$4 = _class.instanceMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethod$4(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethod$4(
            reference.pointer,
            _id_unknownRecordingMethod$4 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethodWithId$1 = _class.instanceMethodId(
    r'unknownRecordingMethodWithId',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethodWithId$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  Metadata unknownRecordingMethodWithId$1(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethodWithId$1(
            reference.pointer,
            _id_unknownRecordingMethodWithId$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Metadata$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return Metadata$Companion.fromReference(_new$(_class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr, _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $Metadata$Companion$NullableType
    extends jni$_.JObjType<Metadata$Companion?> {
  @jni$_.internal
  const $Metadata$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata$Companion;';

  @jni$_.internal
  @core$_.override
  Metadata$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : Metadata$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Metadata$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Metadata$Companion$NullableType) &&
        other is $Metadata$Companion$NullableType;
  }
}

final class $Metadata$Companion$Type
    extends jni$_.JObjType<Metadata$Companion> {
  @jni$_.internal
  const $Metadata$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata$Companion;';

  @jni$_.internal
  @core$_.override
  Metadata$Companion fromReference(jni$_.JReference reference) =>
      Metadata$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata$Companion?> get nullableType =>
      const $Metadata$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Metadata$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Metadata$Companion$Type) &&
        other is $Metadata$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.records.metadata.Metadata`
class Metadata extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<Metadata> $type;

  @jni$_.internal
  Metadata.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/metadata/Metadata');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $Metadata$NullableType();
  static const type = $Metadata$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/records/metadata/Metadata$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata$Companion get Companion =>
      _id_Companion.get(_class, const $Metadata$Companion$Type());

  static final _id_EMPTY_ID = _class.staticFieldId(
    r'EMPTY_ID',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String EMPTY_ID`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get EMPTY_ID =>
      _id_EMPTY_ID.get(_class, const jni$_.JStringType());

  /// from: `static public final int RECORDING_METHOD_UNKNOWN`
  static const RECORDING_METHOD_UNKNOWN = 0;

  /// from: `static public final int RECORDING_METHOD_ACTIVELY_RECORDED`
  static const RECORDING_METHOD_ACTIVELY_RECORDED = 1;

  /// from: `static public final int RECORDING_METHOD_AUTOMATICALLY_RECORDED`
  static const RECORDING_METHOD_AUTOMATICALLY_RECORDED = 2;

  /// from: `static public final int RECORDING_METHOD_MANUAL_ENTRY`
  static const RECORDING_METHOD_MANUAL_ENTRY = 3;
  static final _id_new$ = _class.constructorId(
    r'(ILjava/lang/String;Landroidx/health/connect/client/records/metadata/DataOrigin;Ljava/time/Instant;Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(int i, java.lang.String string, androidx.health.connect.client.records.metadata.DataOrigin dataOrigin, java.time.Instant instant, java.lang.String string1, long j, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Metadata(
    int i,
    jni$_.JString string,
    dataorigin$_.DataOrigin dataOrigin,
    instant$_.Instant instant,
    jni$_.JString? string1,
    int j,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$dataOrigin = dataOrigin.reference;
    final _$instant = instant.reference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return Metadata.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            i,
            _$string.pointer,
            _$dataOrigin.pointer,
            _$instant.pointer,
            _$string1.pointer,
            j,
            _$device.pointer)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(ILjava/lang/String;Landroidx/health/connect/client/records/metadata/DataOrigin;Ljava/time/Instant;Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              int,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(int i, java.lang.String string, androidx.health.connect.client.records.metadata.DataOrigin dataOrigin, java.time.Instant instant, java.lang.String string1, long j, androidx.health.connect.client.records.metadata.Device device, int i1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory Metadata.new$1(
    int i,
    jni$_.JString? string,
    dataorigin$_.DataOrigin? dataOrigin,
    instant$_.Instant? instant,
    jni$_.JString? string1,
    int j,
    device$_.Device? device,
    int i1,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$dataOrigin = dataOrigin?.reference ?? jni$_.jNullReference;
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    final _$string1 = string1?.reference ?? jni$_.jNullReference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return Metadata.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            i,
            _$string.pointer,
            _$dataOrigin.pointer,
            _$instant.pointer,
            _$string1.pointer,
            j,
            _$device.pointer,
            i1,
            _$defaultConstructorMarker.pointer)
        .reference);
  }

  static final _id_getRecordingMethod = _class.instanceMethodId(
    r'getRecordingMethod',
    r'()I',
  );

  static final _getRecordingMethod = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getRecordingMethod()`
  int getRecordingMethod() {
    return _getRecordingMethod(
            reference.pointer, _id_getRecordingMethod as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getId = _class.instanceMethodId(
    r'getId',
    r'()Ljava/lang/String;',
  );

  static final _getId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getId() {
    return _getId(reference.pointer, _id_getId as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getDataOrigin = _class.instanceMethodId(
    r'getDataOrigin',
    r'()Landroidx/health/connect/client/records/metadata/DataOrigin;',
  );

  static final _getDataOrigin = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.records.metadata.DataOrigin getDataOrigin()`
  /// The returned object must be released after use, by calling the [release] method.
  dataorigin$_.DataOrigin getDataOrigin() {
    return _getDataOrigin(
            reference.pointer, _id_getDataOrigin as jni$_.JMethodIDPtr)
        .object<dataorigin$_.DataOrigin>(const dataorigin$_.$DataOrigin$Type());
  }

  static final _id_getLastModifiedTime = _class.instanceMethodId(
    r'getLastModifiedTime',
    r'()Ljava/time/Instant;',
  );

  static final _getLastModifiedTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.time.Instant getLastModifiedTime()`
  /// The returned object must be released after use, by calling the [release] method.
  instant$_.Instant getLastModifiedTime() {
    return _getLastModifiedTime(
            reference.pointer, _id_getLastModifiedTime as jni$_.JMethodIDPtr)
        .object<instant$_.Instant>(const instant$_.$Instant$Type());
  }

  static final _id_getClientRecordId = _class.instanceMethodId(
    r'getClientRecordId',
    r'()Ljava/lang/String;',
  );

  static final _getClientRecordId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getClientRecordId()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getClientRecordId() {
    return _getClientRecordId(
            reference.pointer, _id_getClientRecordId as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getClientRecordVersion = _class.instanceMethodId(
    r'getClientRecordVersion',
    r'()J',
  );

  static final _getClientRecordVersion = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallLongMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final long getClientRecordVersion()`
  int getClientRecordVersion() {
    return _getClientRecordVersion(
            reference.pointer, _id_getClientRecordVersion as jni$_.JMethodIDPtr)
        .long;
  }

  static final _id_getDevice = _class.instanceMethodId(
    r'getDevice',
    r'()Landroidx/health/connect/client/records/metadata/Device;',
  );

  static final _getDevice = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.records.metadata.Device getDevice()`
  /// The returned object must be released after use, by calling the [release] method.
  device$_.Device? getDevice() {
    return _getDevice(reference.pointer, _id_getDevice as jni$_.JMethodIDPtr)
        .object<device$_.Device?>(const device$_.$Device$NullableType());
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_activelyRecorded = _class.staticMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata activelyRecorded(
    device$_.Device device,
  ) {
    final _$device = device.reference;
    return _activelyRecorded(_class.reference.pointer,
            _id_activelyRecorded as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecorded$1 = _class.staticMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata activelyRecorded$1(
    device$_.Device device,
    jni$_.JString string,
    int j,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _activelyRecorded$1(
            _class.reference.pointer,
            _id_activelyRecorded$1 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecordedWithId = _class.staticMethodId(
    r'activelyRecordedWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecordedWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata activelyRecordedWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata activelyRecordedWithId(
    jni$_.JString string,
    device$_.Device device,
  ) {
    final _$string = string.reference;
    final _$device = device.reference;
    return _activelyRecordedWithId(
            _class.reference.pointer,
            _id_activelyRecordedWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded = _class.staticMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata autoRecorded(
    device$_.Device device,
  ) {
    final _$device = device.reference;
    return _autoRecorded(_class.reference.pointer,
            _id_autoRecorded as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded$1 = _class.staticMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata autoRecorded$1(
    device$_.Device device,
    jni$_.JString string,
    int j,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _autoRecorded$1(
            _class.reference.pointer,
            _id_autoRecorded$1 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecordedWithId = _class.staticMethodId(
    r'autoRecordedWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecordedWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata autoRecordedWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata autoRecordedWithId(
    jni$_.JString string,
    device$_.Device device,
  ) {
    final _$string = string.reference;
    final _$device = device.reference;
    return _autoRecordedWithId(
            _class.reference.pointer,
            _id_autoRecordedWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry = _class.staticMethodId(
    r'manualEntry',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntry(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntry(
    device$_.Device? device,
  ) {
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntry(_class.reference.pointer,
            _id_manualEntry as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$1 = _class.staticMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string, long j, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntry$1(
    jni$_.JString string,
    int j,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntry$1(
            _class.reference.pointer,
            _id_manualEntry$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntryWithId = _class.staticMethodId(
    r'manualEntryWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntryWithId = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntryWithId(
    jni$_.JString string,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _manualEntryWithId(
            _class.reference.pointer,
            _id_manualEntryWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod = _class.staticMethodId(
    r'unknownRecordingMethod',
    r'(Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethod(
    device$_.Device? device,
  ) {
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethod(_class.reference.pointer,
            _id_unknownRecordingMethod as jni$_.JMethodIDPtr, _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$1 = _class.staticMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;JLandroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int64,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string, long j, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethod$1(
    jni$_.JString string,
    int j,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethod$1(
            _class.reference.pointer,
            _id_unknownRecordingMethod$1 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethodWithId = _class.staticMethodId(
    r'unknownRecordingMethodWithId',
    r'(Ljava/lang/String;Landroidx/health/connect/client/records/metadata/Device;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethodWithId =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(java.lang.String string, androidx.health.connect.client.records.metadata.Device device)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethodWithId(
    jni$_.JString string,
    device$_.Device? device,
  ) {
    final _$string = string.reference;
    final _$device = device?.reference ?? jni$_.jNullReference;
    return _unknownRecordingMethodWithId(
            _class.reference.pointer,
            _id_unknownRecordingMethodWithId as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$device.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_activelyRecorded$2 = _class.staticMethodId(
    r'activelyRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _activelyRecorded$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata activelyRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata activelyRecorded$2(
    device$_.Device device,
    jni$_.JString string,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _activelyRecorded$2(
            _class.reference.pointer,
            _id_activelyRecorded$2 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_autoRecorded$2 = _class.staticMethodId(
    r'autoRecorded',
    r'(Landroidx/health/connect/client/records/metadata/Device;Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _autoRecorded$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata autoRecorded(androidx.health.connect.client.records.metadata.Device device, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata autoRecorded$2(
    device$_.Device device,
    jni$_.JString string,
  ) {
    final _$device = device.reference;
    final _$string = string.reference;
    return _autoRecorded$2(
            _class.reference.pointer,
            _id_autoRecorded$2 as jni$_.JMethodIDPtr,
            _$device.pointer,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$2 = _class.staticMethodId(
    r'manualEntry',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntry()`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntry$2() {
    return _manualEntry$2(
            _class.reference.pointer, _id_manualEntry$2 as jni$_.JMethodIDPtr)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$3 = _class.staticMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntry$3(
    jni$_.JString string,
    int j,
  ) {
    final _$string = string.reference;
    return _manualEntry$3(_class.reference.pointer,
            _id_manualEntry$3 as jni$_.JMethodIDPtr, _$string.pointer, j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntry$4 = _class.staticMethodId(
    r'manualEntry',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntry$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntry(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntry$4(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _manualEntry$4(_class.reference.pointer,
            _id_manualEntry$4 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_manualEntryWithId$1 = _class.staticMethodId(
    r'manualEntryWithId',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _manualEntryWithId$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata manualEntryWithId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata manualEntryWithId$1(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _manualEntryWithId$1(_class.reference.pointer,
            _id_manualEntryWithId$1 as jni$_.JMethodIDPtr, _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$2 = _class.staticMethodId(
    r'unknownRecordingMethod',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod()`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethod$2() {
    return _unknownRecordingMethod$2(_class.reference.pointer,
            _id_unknownRecordingMethod$2 as jni$_.JMethodIDPtr)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$3 = _class.staticMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;J)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$3 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_
                          .VarArgs<(jni$_.Pointer<jni$_.Void>, jni$_.Int64)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>, int)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string, long j)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethod$3(
    jni$_.JString string,
    int j,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethod$3(
            _class.reference.pointer,
            _id_unknownRecordingMethod$3 as jni$_.JMethodIDPtr,
            _$string.pointer,
            j)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethod$4 = _class.staticMethodId(
    r'unknownRecordingMethod',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethod$4 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethod(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethod$4(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethod$4(
            _class.reference.pointer,
            _id_unknownRecordingMethod$4 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }

  static final _id_unknownRecordingMethodWithId$1 = _class.staticMethodId(
    r'unknownRecordingMethodWithId',
    r'(Ljava/lang/String;)Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _unknownRecordingMethodWithId$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final androidx.health.connect.client.records.metadata.Metadata unknownRecordingMethodWithId(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static Metadata unknownRecordingMethodWithId$1(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _unknownRecordingMethodWithId$1(
            _class.reference.pointer,
            _id_unknownRecordingMethodWithId$1 as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<Metadata>(const $Metadata$Type());
  }
}

final class $Metadata$NullableType extends jni$_.JObjType<Metadata?> {
  @jni$_.internal
  const $Metadata$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata;';

  @jni$_.internal
  @core$_.override
  Metadata? fromReference(jni$_.JReference reference) => reference.isNull
      ? null
      : Metadata.fromReference(
          reference,
        );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Metadata$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Metadata$NullableType) &&
        other is $Metadata$NullableType;
  }
}

final class $Metadata$Type extends jni$_.JObjType<Metadata> {
  @jni$_.internal
  const $Metadata$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/metadata/Metadata;';

  @jni$_.internal
  @core$_.override
  Metadata fromReference(jni$_.JReference reference) => Metadata.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<Metadata?> get nullableType => const $Metadata$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($Metadata$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($Metadata$Type) && other is $Metadata$Type;
  }
}
