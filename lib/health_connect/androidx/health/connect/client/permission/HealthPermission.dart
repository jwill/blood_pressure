// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.health.connect.client.permission.HealthPermission$Companion`
class HealthPermission$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthPermission$Companion> $type;

  @jni$_.internal
  HealthPermission$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/permission/HealthPermission$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthPermission$Companion$NullableType();
  static const type = $HealthPermission$Companion$Type();
  static final _id_getReadPermission = _class.instanceMethodId(
    r'getReadPermission',
    r'()Ljava/lang/String;',
  );

  static final _getReadPermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `synthetic public final java.lang.String getReadPermission()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getReadPermission<$T extends jni$_.JObject>({
    required jni$_.JObjType<$T> T,
  }) {
    return _getReadPermission(
            reference.pointer, _id_getReadPermission as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getReadPermission$1 = _class.instanceMethodId(
    r'getReadPermission',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/String;',
  );

  static final _getReadPermission$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String getReadPermission(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getReadPermission$1(
    jni$_.JObject kClass,
  ) {
    final _$kClass = kClass.reference;
    return _getReadPermission$1(reference.pointer,
            _id_getReadPermission$1 as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getWritePermission = _class.instanceMethodId(
    r'getWritePermission',
    r'()Ljava/lang/String;',
  );

  static final _getWritePermission = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `synthetic public final java.lang.String getWritePermission()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getWritePermission<$T extends jni$_.JObject>({
    required jni$_.JObjType<$T> T,
  }) {
    return _getWritePermission(
            reference.pointer, _id_getWritePermission as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getWritePermission$1 = _class.instanceMethodId(
    r'getWritePermission',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/String;',
  );

  static final _getWritePermission$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final java.lang.String getWritePermission(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getWritePermission$1(
    jni$_.JObject kClass,
  ) {
    final _$kClass = kClass.reference;
    return _getWritePermission$1(reference.pointer,
            _id_getWritePermission$1 as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory HealthPermission$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return HealthPermission$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $HealthPermission$Companion$NullableType
    extends jni$_.JObjType<HealthPermission$Companion?> {
  @jni$_.internal
  const $HealthPermission$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/permission/HealthPermission$Companion;';

  @jni$_.internal
  @core$_.override
  HealthPermission$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthPermission$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthPermission$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthPermission$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthPermission$Companion$NullableType) &&
        other is $HealthPermission$Companion$NullableType;
  }
}

final class $HealthPermission$Companion$Type
    extends jni$_.JObjType<HealthPermission$Companion> {
  @jni$_.internal
  const $HealthPermission$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/permission/HealthPermission$Companion;';

  @jni$_.internal
  @core$_.override
  HealthPermission$Companion fromReference(jni$_.JReference reference) =>
      HealthPermission$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthPermission$Companion?> get nullableType =>
      const $HealthPermission$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthPermission$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthPermission$Companion$Type) &&
        other is $HealthPermission$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.permission.HealthPermission`
class HealthPermission extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthPermission> $type;

  @jni$_.internal
  HealthPermission.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/permission/HealthPermission');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthPermission$NullableType();
  static const type = $HealthPermission$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/permission/HealthPermission$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.permission.HealthPermission$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthPermission$Companion get Companion =>
      _id_Companion.get(_class, const $HealthPermission$Companion$Type());

  static final _id_PERMISSION_PREFIX = _class.staticFieldId(
    r'PERMISSION_PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERMISSION_PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get PERMISSION_PREFIX =>
      _id_PERMISSION_PREFIX.get(_class, const jni$_.JStringType());

  static final _id_PERMISSION_WRITE_EXERCISE_ROUTE = _class.staticFieldId(
    r'PERMISSION_WRITE_EXERCISE_ROUTE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERMISSION_WRITE_EXERCISE_ROUTE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get PERMISSION_WRITE_EXERCISE_ROUTE =>
      _id_PERMISSION_WRITE_EXERCISE_ROUTE.get(
          _class, const jni$_.JStringType());

  static final _id_PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND =
      _class.staticFieldId(
    r'PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND =>
      _id_PERMISSION_READ_HEALTH_DATA_IN_BACKGROUND.get(
          _class, const jni$_.JStringType());

  static final _id_PERMISSION_READ_HEALTH_DATA_HISTORY = _class.staticFieldId(
    r'PERMISSION_READ_HEALTH_DATA_HISTORY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String PERMISSION_READ_HEALTH_DATA_HISTORY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get PERMISSION_READ_HEALTH_DATA_HISTORY =>
      _id_PERMISSION_READ_HEALTH_DATA_HISTORY.get(
          _class, const jni$_.JStringType());

  static final _id_READ_ACTIVE_CALORIES_BURNED = _class.staticFieldId(
    r'READ_ACTIVE_CALORIES_BURNED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_ACTIVE_CALORIES_BURNED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_ACTIVE_CALORIES_BURNED =>
      _id_READ_ACTIVE_CALORIES_BURNED.get(_class, const jni$_.JStringType());

  static final _id_READ_DISTANCE = _class.staticFieldId(
    r'READ_DISTANCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_DISTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_DISTANCE =>
      _id_READ_DISTANCE.get(_class, const jni$_.JStringType());

  static final _id_READ_ELEVATION_GAINED = _class.staticFieldId(
    r'READ_ELEVATION_GAINED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_ELEVATION_GAINED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_ELEVATION_GAINED =>
      _id_READ_ELEVATION_GAINED.get(_class, const jni$_.JStringType());

  static final _id_READ_EXERCISE = _class.staticFieldId(
    r'READ_EXERCISE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_EXERCISE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_EXERCISE =>
      _id_READ_EXERCISE.get(_class, const jni$_.JStringType());

  static final _id_READ_FLOORS_CLIMBED = _class.staticFieldId(
    r'READ_FLOORS_CLIMBED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_FLOORS_CLIMBED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_FLOORS_CLIMBED =>
      _id_READ_FLOORS_CLIMBED.get(_class, const jni$_.JStringType());

  static final _id_READ_STEPS = _class.staticFieldId(
    r'READ_STEPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_STEPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_STEPS =>
      _id_READ_STEPS.get(_class, const jni$_.JStringType());

  static final _id_READ_TOTAL_CALORIES_BURNED = _class.staticFieldId(
    r'READ_TOTAL_CALORIES_BURNED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_TOTAL_CALORIES_BURNED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_TOTAL_CALORIES_BURNED =>
      _id_READ_TOTAL_CALORIES_BURNED.get(_class, const jni$_.JStringType());

  static final _id_READ_VO2_MAX = _class.staticFieldId(
    r'READ_VO2_MAX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_VO2_MAX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_VO2_MAX =>
      _id_READ_VO2_MAX.get(_class, const jni$_.JStringType());

  static final _id_READ_WHEELCHAIR_PUSHES = _class.staticFieldId(
    r'READ_WHEELCHAIR_PUSHES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_WHEELCHAIR_PUSHES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_WHEELCHAIR_PUSHES =>
      _id_READ_WHEELCHAIR_PUSHES.get(_class, const jni$_.JStringType());

  static final _id_READ_PLANNED_EXERCISE = _class.staticFieldId(
    r'READ_PLANNED_EXERCISE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_PLANNED_EXERCISE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_PLANNED_EXERCISE =>
      _id_READ_PLANNED_EXERCISE.get(_class, const jni$_.JStringType());

  static final _id_READ_POWER = _class.staticFieldId(
    r'READ_POWER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_POWER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_POWER =>
      _id_READ_POWER.get(_class, const jni$_.JStringType());

  static final _id_READ_SPEED = _class.staticFieldId(
    r'READ_SPEED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SPEED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_SPEED =>
      _id_READ_SPEED.get(_class, const jni$_.JStringType());

  static final _id_READ_BASAL_METABOLIC_RATE = _class.staticFieldId(
    r'READ_BASAL_METABOLIC_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BASAL_METABOLIC_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BASAL_METABOLIC_RATE =>
      _id_READ_BASAL_METABOLIC_RATE.get(_class, const jni$_.JStringType());

  static final _id_READ_BODY_FAT = _class.staticFieldId(
    r'READ_BODY_FAT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BODY_FAT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BODY_FAT =>
      _id_READ_BODY_FAT.get(_class, const jni$_.JStringType());

  static final _id_READ_BODY_WATER_MASS = _class.staticFieldId(
    r'READ_BODY_WATER_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BODY_WATER_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BODY_WATER_MASS =>
      _id_READ_BODY_WATER_MASS.get(_class, const jni$_.JStringType());

  static final _id_READ_BONE_MASS = _class.staticFieldId(
    r'READ_BONE_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BONE_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BONE_MASS =>
      _id_READ_BONE_MASS.get(_class, const jni$_.JStringType());

  static final _id_READ_HEIGHT = _class.staticFieldId(
    r'READ_HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_HEIGHT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_HEIGHT =>
      _id_READ_HEIGHT.get(_class, const jni$_.JStringType());

  static final _id_READ_LEAN_BODY_MASS = _class.staticFieldId(
    r'READ_LEAN_BODY_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_LEAN_BODY_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_LEAN_BODY_MASS =>
      _id_READ_LEAN_BODY_MASS.get(_class, const jni$_.JStringType());

  static final _id_READ_WEIGHT = _class.staticFieldId(
    r'READ_WEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_WEIGHT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_WEIGHT =>
      _id_READ_WEIGHT.get(_class, const jni$_.JStringType());

  static final _id_READ_CERVICAL_MUCUS = _class.staticFieldId(
    r'READ_CERVICAL_MUCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_CERVICAL_MUCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_CERVICAL_MUCUS =>
      _id_READ_CERVICAL_MUCUS.get(_class, const jni$_.JStringType());

  static final _id_READ_INTERMENSTRUAL_BLEEDING = _class.staticFieldId(
    r'READ_INTERMENSTRUAL_BLEEDING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_INTERMENSTRUAL_BLEEDING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_INTERMENSTRUAL_BLEEDING =>
      _id_READ_INTERMENSTRUAL_BLEEDING.get(_class, const jni$_.JStringType());

  static final _id_READ_MENSTRUATION = _class.staticFieldId(
    r'READ_MENSTRUATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MENSTRUATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_MENSTRUATION =>
      _id_READ_MENSTRUATION.get(_class, const jni$_.JStringType());

  static final _id_READ_OVULATION_TEST = _class.staticFieldId(
    r'READ_OVULATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_OVULATION_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_OVULATION_TEST =>
      _id_READ_OVULATION_TEST.get(_class, const jni$_.JStringType());

  static final _id_READ_SEXUAL_ACTIVITY = _class.staticFieldId(
    r'READ_SEXUAL_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SEXUAL_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_SEXUAL_ACTIVITY =>
      _id_READ_SEXUAL_ACTIVITY.get(_class, const jni$_.JStringType());

  static final _id_READ_MINDFULNESS_SESSION = _class.staticFieldId(
    r'READ_MINDFULNESS_SESSION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_MINDFULNESS_SESSION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_MINDFULNESS_SESSION =>
      _id_READ_MINDFULNESS_SESSION.get(_class, const jni$_.JStringType());

  static final _id_READ_HYDRATION = _class.staticFieldId(
    r'READ_HYDRATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_HYDRATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_HYDRATION =>
      _id_READ_HYDRATION.get(_class, const jni$_.JStringType());

  static final _id_READ_NUTRITION = _class.staticFieldId(
    r'READ_NUTRITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_NUTRITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_NUTRITION =>
      _id_READ_NUTRITION.get(_class, const jni$_.JStringType());

  static final _id_READ_SLEEP = _class.staticFieldId(
    r'READ_SLEEP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SLEEP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_SLEEP =>
      _id_READ_SLEEP.get(_class, const jni$_.JStringType());

  static final _id_READ_BASAL_BODY_TEMPERATURE = _class.staticFieldId(
    r'READ_BASAL_BODY_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BASAL_BODY_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BASAL_BODY_TEMPERATURE =>
      _id_READ_BASAL_BODY_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_READ_BLOOD_GLUCOSE = _class.staticFieldId(
    r'READ_BLOOD_GLUCOSE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BLOOD_GLUCOSE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BLOOD_GLUCOSE =>
      _id_READ_BLOOD_GLUCOSE.get(_class, const jni$_.JStringType());

  static final _id_READ_BLOOD_PRESSURE = _class.staticFieldId(
    r'READ_BLOOD_PRESSURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BLOOD_PRESSURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BLOOD_PRESSURE =>
      _id_READ_BLOOD_PRESSURE.get(_class, const jni$_.JStringType());

  static final _id_READ_BODY_TEMPERATURE = _class.staticFieldId(
    r'READ_BODY_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_BODY_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_BODY_TEMPERATURE =>
      _id_READ_BODY_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_READ_HEART_RATE = _class.staticFieldId(
    r'READ_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_HEART_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_HEART_RATE =>
      _id_READ_HEART_RATE.get(_class, const jni$_.JStringType());

  static final _id_READ_HEART_RATE_VARIABILITY = _class.staticFieldId(
    r'READ_HEART_RATE_VARIABILITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_HEART_RATE_VARIABILITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_HEART_RATE_VARIABILITY =>
      _id_READ_HEART_RATE_VARIABILITY.get(_class, const jni$_.JStringType());

  static final _id_READ_OXYGEN_SATURATION = _class.staticFieldId(
    r'READ_OXYGEN_SATURATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_OXYGEN_SATURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_OXYGEN_SATURATION =>
      _id_READ_OXYGEN_SATURATION.get(_class, const jni$_.JStringType());

  static final _id_READ_RESPIRATORY_RATE = _class.staticFieldId(
    r'READ_RESPIRATORY_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_RESPIRATORY_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_RESPIRATORY_RATE =>
      _id_READ_RESPIRATORY_RATE.get(_class, const jni$_.JStringType());

  static final _id_READ_RESTING_HEART_RATE = _class.staticFieldId(
    r'READ_RESTING_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_RESTING_HEART_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_RESTING_HEART_RATE =>
      _id_READ_RESTING_HEART_RATE.get(_class, const jni$_.JStringType());

  static final _id_READ_SKIN_TEMPERATURE = _class.staticFieldId(
    r'READ_SKIN_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_SKIN_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_SKIN_TEMPERATURE =>
      _id_READ_SKIN_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_ACTIVE_CALORIES_BURNED = _class.staticFieldId(
    r'WRITE_ACTIVE_CALORIES_BURNED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_ACTIVE_CALORIES_BURNED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_ACTIVE_CALORIES_BURNED =>
      _id_WRITE_ACTIVE_CALORIES_BURNED.get(_class, const jni$_.JStringType());

  static final _id_WRITE_DISTANCE = _class.staticFieldId(
    r'WRITE_DISTANCE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_DISTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_DISTANCE =>
      _id_WRITE_DISTANCE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_ELEVATION_GAINED = _class.staticFieldId(
    r'WRITE_ELEVATION_GAINED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_ELEVATION_GAINED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_ELEVATION_GAINED =>
      _id_WRITE_ELEVATION_GAINED.get(_class, const jni$_.JStringType());

  static final _id_WRITE_EXERCISE = _class.staticFieldId(
    r'WRITE_EXERCISE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_EXERCISE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_EXERCISE =>
      _id_WRITE_EXERCISE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_FLOORS_CLIMBED = _class.staticFieldId(
    r'WRITE_FLOORS_CLIMBED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_FLOORS_CLIMBED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_FLOORS_CLIMBED =>
      _id_WRITE_FLOORS_CLIMBED.get(_class, const jni$_.JStringType());

  static final _id_WRITE_STEPS = _class.staticFieldId(
    r'WRITE_STEPS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_STEPS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_STEPS =>
      _id_WRITE_STEPS.get(_class, const jni$_.JStringType());

  static final _id_WRITE_TOTAL_CALORIES_BURNED = _class.staticFieldId(
    r'WRITE_TOTAL_CALORIES_BURNED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_TOTAL_CALORIES_BURNED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_TOTAL_CALORIES_BURNED =>
      _id_WRITE_TOTAL_CALORIES_BURNED.get(_class, const jni$_.JStringType());

  static final _id_WRITE_VO2_MAX = _class.staticFieldId(
    r'WRITE_VO2_MAX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_VO2_MAX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_VO2_MAX =>
      _id_WRITE_VO2_MAX.get(_class, const jni$_.JStringType());

  static final _id_WRITE_WHEELCHAIR_PUSHES = _class.staticFieldId(
    r'WRITE_WHEELCHAIR_PUSHES',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_WHEELCHAIR_PUSHES`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_WHEELCHAIR_PUSHES =>
      _id_WRITE_WHEELCHAIR_PUSHES.get(_class, const jni$_.JStringType());

  static final _id_WRITE_PLANNED_EXERCISE = _class.staticFieldId(
    r'WRITE_PLANNED_EXERCISE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_PLANNED_EXERCISE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_PLANNED_EXERCISE =>
      _id_WRITE_PLANNED_EXERCISE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_POWER = _class.staticFieldId(
    r'WRITE_POWER',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_POWER`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_POWER =>
      _id_WRITE_POWER.get(_class, const jni$_.JStringType());

  static final _id_WRITE_SPEED = _class.staticFieldId(
    r'WRITE_SPEED',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SPEED`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_SPEED =>
      _id_WRITE_SPEED.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BASAL_METABOLIC_RATE = _class.staticFieldId(
    r'WRITE_BASAL_METABOLIC_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BASAL_METABOLIC_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BASAL_METABOLIC_RATE =>
      _id_WRITE_BASAL_METABOLIC_RATE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BODY_FAT = _class.staticFieldId(
    r'WRITE_BODY_FAT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BODY_FAT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BODY_FAT =>
      _id_WRITE_BODY_FAT.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BODY_WATER_MASS = _class.staticFieldId(
    r'WRITE_BODY_WATER_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BODY_WATER_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BODY_WATER_MASS =>
      _id_WRITE_BODY_WATER_MASS.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BONE_MASS = _class.staticFieldId(
    r'WRITE_BONE_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BONE_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BONE_MASS =>
      _id_WRITE_BONE_MASS.get(_class, const jni$_.JStringType());

  static final _id_WRITE_HEIGHT = _class.staticFieldId(
    r'WRITE_HEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_HEIGHT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_HEIGHT =>
      _id_WRITE_HEIGHT.get(_class, const jni$_.JStringType());

  static final _id_WRITE_LEAN_BODY_MASS = _class.staticFieldId(
    r'WRITE_LEAN_BODY_MASS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_LEAN_BODY_MASS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_LEAN_BODY_MASS =>
      _id_WRITE_LEAN_BODY_MASS.get(_class, const jni$_.JStringType());

  static final _id_WRITE_WEIGHT = _class.staticFieldId(
    r'WRITE_WEIGHT',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_WEIGHT`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_WEIGHT =>
      _id_WRITE_WEIGHT.get(_class, const jni$_.JStringType());

  static final _id_WRITE_CERVICAL_MUCUS = _class.staticFieldId(
    r'WRITE_CERVICAL_MUCUS',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_CERVICAL_MUCUS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_CERVICAL_MUCUS =>
      _id_WRITE_CERVICAL_MUCUS.get(_class, const jni$_.JStringType());

  static final _id_WRITE_INTERMENSTRUAL_BLEEDING = _class.staticFieldId(
    r'WRITE_INTERMENSTRUAL_BLEEDING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_INTERMENSTRUAL_BLEEDING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_INTERMENSTRUAL_BLEEDING =>
      _id_WRITE_INTERMENSTRUAL_BLEEDING.get(_class, const jni$_.JStringType());

  static final _id_WRITE_MENSTRUATION = _class.staticFieldId(
    r'WRITE_MENSTRUATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_MENSTRUATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_MENSTRUATION =>
      _id_WRITE_MENSTRUATION.get(_class, const jni$_.JStringType());

  static final _id_WRITE_OVULATION_TEST = _class.staticFieldId(
    r'WRITE_OVULATION_TEST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_OVULATION_TEST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_OVULATION_TEST =>
      _id_WRITE_OVULATION_TEST.get(_class, const jni$_.JStringType());

  static final _id_WRITE_SEXUAL_ACTIVITY = _class.staticFieldId(
    r'WRITE_SEXUAL_ACTIVITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SEXUAL_ACTIVITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_SEXUAL_ACTIVITY =>
      _id_WRITE_SEXUAL_ACTIVITY.get(_class, const jni$_.JStringType());

  static final _id_WRITE_HYDRATION = _class.staticFieldId(
    r'WRITE_HYDRATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_HYDRATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_HYDRATION =>
      _id_WRITE_HYDRATION.get(_class, const jni$_.JStringType());

  static final _id_WRITE_NUTRITION = _class.staticFieldId(
    r'WRITE_NUTRITION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_NUTRITION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_NUTRITION =>
      _id_WRITE_NUTRITION.get(_class, const jni$_.JStringType());

  static final _id_WRITE_MINDFULNESS_SESSION = _class.staticFieldId(
    r'WRITE_MINDFULNESS_SESSION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_MINDFULNESS_SESSION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_MINDFULNESS_SESSION =>
      _id_WRITE_MINDFULNESS_SESSION.get(_class, const jni$_.JStringType());

  static final _id_WRITE_SLEEP = _class.staticFieldId(
    r'WRITE_SLEEP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SLEEP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_SLEEP =>
      _id_WRITE_SLEEP.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BASAL_BODY_TEMPERATURE = _class.staticFieldId(
    r'WRITE_BASAL_BODY_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BASAL_BODY_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BASAL_BODY_TEMPERATURE =>
      _id_WRITE_BASAL_BODY_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BLOOD_GLUCOSE = _class.staticFieldId(
    r'WRITE_BLOOD_GLUCOSE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BLOOD_GLUCOSE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BLOOD_GLUCOSE =>
      _id_WRITE_BLOOD_GLUCOSE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BLOOD_PRESSURE = _class.staticFieldId(
    r'WRITE_BLOOD_PRESSURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BLOOD_PRESSURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BLOOD_PRESSURE =>
      _id_WRITE_BLOOD_PRESSURE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_BODY_TEMPERATURE = _class.staticFieldId(
    r'WRITE_BODY_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_BODY_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_BODY_TEMPERATURE =>
      _id_WRITE_BODY_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_HEART_RATE = _class.staticFieldId(
    r'WRITE_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_HEART_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_HEART_RATE =>
      _id_WRITE_HEART_RATE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_HEART_RATE_VARIABILITY = _class.staticFieldId(
    r'WRITE_HEART_RATE_VARIABILITY',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_HEART_RATE_VARIABILITY`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_HEART_RATE_VARIABILITY =>
      _id_WRITE_HEART_RATE_VARIABILITY.get(_class, const jni$_.JStringType());

  static final _id_WRITE_OXYGEN_SATURATION = _class.staticFieldId(
    r'WRITE_OXYGEN_SATURATION',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_OXYGEN_SATURATION`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_OXYGEN_SATURATION =>
      _id_WRITE_OXYGEN_SATURATION.get(_class, const jni$_.JStringType());

  static final _id_WRITE_RESPIRATORY_RATE = _class.staticFieldId(
    r'WRITE_RESPIRATORY_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_RESPIRATORY_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_RESPIRATORY_RATE =>
      _id_WRITE_RESPIRATORY_RATE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_RESTING_HEART_RATE = _class.staticFieldId(
    r'WRITE_RESTING_HEART_RATE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_RESTING_HEART_RATE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_RESTING_HEART_RATE =>
      _id_WRITE_RESTING_HEART_RATE.get(_class, const jni$_.JStringType());

  static final _id_WRITE_SKIN_TEMPERATURE = _class.staticFieldId(
    r'WRITE_SKIN_TEMPERATURE',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_SKIN_TEMPERATURE`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_SKIN_TEMPERATURE =>
      _id_WRITE_SKIN_TEMPERATURE.get(_class, const jni$_.JStringType());

  static final _id_READ_PERMISSION_PREFIX = _class.staticFieldId(
    r'READ_PERMISSION_PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String READ_PERMISSION_PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get READ_PERMISSION_PREFIX =>
      _id_READ_PERMISSION_PREFIX.get(_class, const jni$_.JStringType());

  static final _id_WRITE_PERMISSION_PREFIX = _class.staticFieldId(
    r'WRITE_PERMISSION_PREFIX',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String WRITE_PERMISSION_PREFIX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get WRITE_PERMISSION_PREFIX =>
      _id_WRITE_PERMISSION_PREFIX.get(_class, const jni$_.JStringType());

  static final _id_ALL_PERMISSIONS = _class.staticFieldId(
    r'ALL_PERMISSIONS',
    r'Ljava/util/List;',
  );

  /// from: `static public final java.util.List ALL_PERMISSIONS`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JList<jni$_.JString?> get ALL_PERMISSIONS =>
      _id_ALL_PERMISSIONS.get(_class,
          const jni$_.JListType<jni$_.JString?>(jni$_.JStringNullableType()));

  static final _id_new$ = _class.constructorId(
    r'()V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public void <init>()`
  /// The returned object must be released after use, by calling the [release] method.
  factory HealthPermission() {
    return HealthPermission.fromReference(
        _new$(_class.reference.pointer, _id_new$ as jni$_.JMethodIDPtr)
            .reference);
  }

  static final _id_getReadPermission = _class.staticMethodId(
    r'getReadPermission',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/String;',
  );

  static final _getReadPermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.String getReadPermission(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString getReadPermission(
    jni$_.JObject kClass,
  ) {
    final _$kClass = kClass.reference;
    return _getReadPermission(_class.reference.pointer,
            _id_getReadPermission as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getWritePermission = _class.staticMethodId(
    r'getWritePermission',
    r'(Lkotlin/reflect/KClass;)Ljava/lang/String;',
  );

  static final _getWritePermission = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public final java.lang.String getWritePermission(kotlin.reflect.KClass kClass)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString getWritePermission(
    jni$_.JObject kClass,
  ) {
    final _$kClass = kClass.reference;
    return _getWritePermission(_class.reference.pointer,
            _id_getWritePermission as jni$_.JMethodIDPtr, _$kClass.pointer)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $HealthPermission$NullableType
    extends jni$_.JObjType<HealthPermission?> {
  @jni$_.internal
  const $HealthPermission$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/permission/HealthPermission;';

  @jni$_.internal
  @core$_.override
  HealthPermission? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthPermission.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthPermission?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthPermission$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthPermission$NullableType) &&
        other is $HealthPermission$NullableType;
  }
}

final class $HealthPermission$Type extends jni$_.JObjType<HealthPermission> {
  @jni$_.internal
  const $HealthPermission$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/permission/HealthPermission;';

  @jni$_.internal
  @core$_.override
  HealthPermission fromReference(jni$_.JReference reference) =>
      HealthPermission.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthPermission?> get nullableType =>
      const $HealthPermission$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthPermission$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthPermission$Type) &&
        other is $HealthPermission$Type;
  }
}
