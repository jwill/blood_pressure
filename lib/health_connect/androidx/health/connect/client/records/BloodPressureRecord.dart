// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../../../../../java/time/Instant.dart' as instant$_;

import '../../../../../java/time/ZoneOffset.dart' as zoneoffset$_;

import '../units/Pressure.dart' as pressure$_;

import 'metadata/Metadata.dart' as metadata$_;

/// from: `androidx.health.connect.client.records.BloodPressureRecord$BodyPosition`
class BloodPressureRecord$BodyPosition extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord$BodyPosition> $type;

  @jni$_.internal
  BloodPressureRecord$BodyPosition.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord$BodyPosition');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BloodPressureRecord$BodyPosition$NullableType();
  static const type = $BloodPressureRecord$BodyPosition$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Landroidx/health/connect/client/records/BloodPressureRecord$BodyPosition;',
  );

  /// from: `static public final androidx.health.connect.client.records.BloodPressureRecord$BodyPosition INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static BloodPressureRecord$BodyPosition get INSTANCE =>
      _id_INSTANCE.get(_class, const $BloodPressureRecord$BodyPosition$Type());

  static final _id_STANDING_UP = _class.staticFieldId(
    r'STANDING_UP',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String STANDING_UP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get STANDING_UP =>
      _id_STANDING_UP.get(_class, const jni$_.JStringType());

  static final _id_SITTING_DOWN = _class.staticFieldId(
    r'SITTING_DOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String SITTING_DOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get SITTING_DOWN =>
      _id_SITTING_DOWN.get(_class, const jni$_.JStringType());

  static final _id_LYING_DOWN = _class.staticFieldId(
    r'LYING_DOWN',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LYING_DOWN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get LYING_DOWN =>
      _id_LYING_DOWN.get(_class, const jni$_.JStringType());

  static final _id_RECLINING = _class.staticFieldId(
    r'RECLINING',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RECLINING`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get RECLINING =>
      _id_RECLINING.get(_class, const jni$_.JStringType());
}

final class $BloodPressureRecord$BodyPosition$NullableType
    extends jni$_.JObjType<BloodPressureRecord$BodyPosition?> {
  @jni$_.internal
  const $BloodPressureRecord$BodyPosition$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$BodyPosition;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$BodyPosition? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord$BodyPosition.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$BodyPosition?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$BodyPosition$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$BodyPosition$NullableType) &&
        other is $BloodPressureRecord$BodyPosition$NullableType;
  }
}

final class $BloodPressureRecord$BodyPosition$Type
    extends jni$_.JObjType<BloodPressureRecord$BodyPosition> {
  @jni$_.internal
  const $BloodPressureRecord$BodyPosition$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$BodyPosition;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$BodyPosition fromReference(jni$_.JReference reference) =>
      BloodPressureRecord$BodyPosition.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$BodyPosition?> get nullableType =>
      const $BloodPressureRecord$BodyPosition$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$BodyPosition$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$BodyPosition$Type) &&
        other is $BloodPressureRecord$BodyPosition$Type;
  }
}

/// from: `androidx.health.connect.client.records.BloodPressureRecord$BodyPositions`
class BloodPressureRecord$BodyPositions extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord$BodyPositions> $type;

  @jni$_.internal
  BloodPressureRecord$BodyPositions.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord$BodyPositions');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BloodPressureRecord$BodyPositions$NullableType();
  static const type = $BloodPressureRecord$BodyPositions$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BloodPressureRecord$BodyPositions> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BloodPressureRecord$BodyPositions $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.records.BloodPressureRecord$BodyPositions',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BloodPressureRecord$BodyPositions.implement(
    $BloodPressureRecord$BodyPositions $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BloodPressureRecord$BodyPositions.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BloodPressureRecord$BodyPositions {
  factory $BloodPressureRecord$BodyPositions() =
      _$BloodPressureRecord$BodyPositions;
}

final class _$BloodPressureRecord$BodyPositions
    with $BloodPressureRecord$BodyPositions {
  _$BloodPressureRecord$BodyPositions();
}

final class $BloodPressureRecord$BodyPositions$NullableType
    extends jni$_.JObjType<BloodPressureRecord$BodyPositions?> {
  @jni$_.internal
  const $BloodPressureRecord$BodyPositions$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$BodyPositions;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$BodyPositions? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord$BodyPositions.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$BodyPositions?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($BloodPressureRecord$BodyPositions$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$BodyPositions$NullableType) &&
        other is $BloodPressureRecord$BodyPositions$NullableType;
  }
}

final class $BloodPressureRecord$BodyPositions$Type
    extends jni$_.JObjType<BloodPressureRecord$BodyPositions> {
  @jni$_.internal
  const $BloodPressureRecord$BodyPositions$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$BodyPositions;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$BodyPositions fromReference(jni$_.JReference reference) =>
      BloodPressureRecord$BodyPositions.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$BodyPositions?> get nullableType =>
      const $BloodPressureRecord$BodyPositions$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$BodyPositions$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$BodyPositions$Type) &&
        other is $BloodPressureRecord$BodyPositions$Type;
  }
}

/// from: `androidx.health.connect.client.records.BloodPressureRecord$Companion`
class BloodPressureRecord$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord$Companion> $type;

  @jni$_.internal
  BloodPressureRecord$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BloodPressureRecord$Companion$NullableType();
  static const type = $BloodPressureRecord$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BloodPressureRecord$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return BloodPressureRecord$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $BloodPressureRecord$Companion$NullableType
    extends jni$_.JObjType<BloodPressureRecord$Companion?> {
  @jni$_.internal
  const $BloodPressureRecord$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$Companion;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$Companion$NullableType) &&
        other is $BloodPressureRecord$Companion$NullableType;
  }
}

final class $BloodPressureRecord$Companion$Type
    extends jni$_.JObjType<BloodPressureRecord$Companion> {
  @jni$_.internal
  const $BloodPressureRecord$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$Companion;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$Companion fromReference(jni$_.JReference reference) =>
      BloodPressureRecord$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$Companion?> get nullableType =>
      const $BloodPressureRecord$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$Companion$Type) &&
        other is $BloodPressureRecord$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.records.BloodPressureRecord$MeasurementLocation`
class BloodPressureRecord$MeasurementLocation extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord$MeasurementLocation> $type;

  @jni$_.internal
  BloodPressureRecord$MeasurementLocation.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord$MeasurementLocation');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $BloodPressureRecord$MeasurementLocation$NullableType();
  static const type = $BloodPressureRecord$MeasurementLocation$Type();
  static final _id_INSTANCE = _class.staticFieldId(
    r'INSTANCE',
    r'Landroidx/health/connect/client/records/BloodPressureRecord$MeasurementLocation;',
  );

  /// from: `static public final androidx.health.connect.client.records.BloodPressureRecord$MeasurementLocation INSTANCE`
  /// The returned object must be released after use, by calling the [release] method.
  static BloodPressureRecord$MeasurementLocation get INSTANCE => _id_INSTANCE
      .get(_class, const $BloodPressureRecord$MeasurementLocation$Type());

  static final _id_LEFT_WRIST = _class.staticFieldId(
    r'LEFT_WRIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LEFT_WRIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get LEFT_WRIST =>
      _id_LEFT_WRIST.get(_class, const jni$_.JStringType());

  static final _id_RIGHT_WRIST = _class.staticFieldId(
    r'RIGHT_WRIST',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RIGHT_WRIST`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get RIGHT_WRIST =>
      _id_RIGHT_WRIST.get(_class, const jni$_.JStringType());

  static final _id_LEFT_UPPER_ARM = _class.staticFieldId(
    r'LEFT_UPPER_ARM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String LEFT_UPPER_ARM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get LEFT_UPPER_ARM =>
      _id_LEFT_UPPER_ARM.get(_class, const jni$_.JStringType());

  static final _id_RIGHT_UPPER_ARM = _class.staticFieldId(
    r'RIGHT_UPPER_ARM',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String RIGHT_UPPER_ARM`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get RIGHT_UPPER_ARM =>
      _id_RIGHT_UPPER_ARM.get(_class, const jni$_.JStringType());
}

final class $BloodPressureRecord$MeasurementLocation$NullableType
    extends jni$_.JObjType<BloodPressureRecord$MeasurementLocation?> {
  @jni$_.internal
  const $BloodPressureRecord$MeasurementLocation$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$MeasurementLocation;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$MeasurementLocation? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord$MeasurementLocation.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$MeasurementLocation?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($BloodPressureRecord$MeasurementLocation$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$MeasurementLocation$NullableType) &&
        other is $BloodPressureRecord$MeasurementLocation$NullableType;
  }
}

final class $BloodPressureRecord$MeasurementLocation$Type
    extends jni$_.JObjType<BloodPressureRecord$MeasurementLocation> {
  @jni$_.internal
  const $BloodPressureRecord$MeasurementLocation$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$MeasurementLocation;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$MeasurementLocation fromReference(
          jni$_.JReference reference) =>
      BloodPressureRecord$MeasurementLocation.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$MeasurementLocation?> get nullableType =>
      const $BloodPressureRecord$MeasurementLocation$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$MeasurementLocation$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$MeasurementLocation$Type) &&
        other is $BloodPressureRecord$MeasurementLocation$Type;
  }
}

/// from: `androidx.health.connect.client.records.BloodPressureRecord$MeasurementLocations`
class BloodPressureRecord$MeasurementLocations extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord$MeasurementLocations> $type;

  @jni$_.internal
  BloodPressureRecord$MeasurementLocations.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord$MeasurementLocations');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $BloodPressureRecord$MeasurementLocations$NullableType();
  static const type = $BloodPressureRecord$MeasurementLocations$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $BloodPressureRecord$MeasurementLocations>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $BloodPressureRecord$MeasurementLocations $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.records.BloodPressureRecord$MeasurementLocations',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory BloodPressureRecord$MeasurementLocations.implement(
    $BloodPressureRecord$MeasurementLocations $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return BloodPressureRecord$MeasurementLocations.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $BloodPressureRecord$MeasurementLocations {
  factory $BloodPressureRecord$MeasurementLocations() =
      _$BloodPressureRecord$MeasurementLocations;
}

final class _$BloodPressureRecord$MeasurementLocations
    with $BloodPressureRecord$MeasurementLocations {
  _$BloodPressureRecord$MeasurementLocations();
}

final class $BloodPressureRecord$MeasurementLocations$NullableType
    extends jni$_.JObjType<BloodPressureRecord$MeasurementLocations?> {
  @jni$_.internal
  const $BloodPressureRecord$MeasurementLocations$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$MeasurementLocations;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$MeasurementLocations? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord$MeasurementLocations.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$MeasurementLocations?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($BloodPressureRecord$MeasurementLocations$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$MeasurementLocations$NullableType) &&
        other is $BloodPressureRecord$MeasurementLocations$NullableType;
  }
}

final class $BloodPressureRecord$MeasurementLocations$Type
    extends jni$_.JObjType<BloodPressureRecord$MeasurementLocations> {
  @jni$_.internal
  const $BloodPressureRecord$MeasurementLocations$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord$MeasurementLocations;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord$MeasurementLocations fromReference(
          jni$_.JReference reference) =>
      BloodPressureRecord$MeasurementLocations.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord$MeasurementLocations?> get nullableType =>
      const $BloodPressureRecord$MeasurementLocations$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$MeasurementLocations$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($BloodPressureRecord$MeasurementLocations$Type) &&
        other is $BloodPressureRecord$MeasurementLocations$Type;
  }
}

/// from: `androidx.health.connect.client.records.BloodPressureRecord`
class BloodPressureRecord extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<BloodPressureRecord> $type;

  @jni$_.internal
  BloodPressureRecord.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/records/BloodPressureRecord');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $BloodPressureRecord$NullableType();
  static const type = $BloodPressureRecord$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/records/BloodPressureRecord$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.records.BloodPressureRecord$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static BloodPressureRecord$Companion get Companion =>
      _id_Companion.get(_class, const $BloodPressureRecord$Companion$Type());

  /// from: `static public final int MEASUREMENT_LOCATION_UNKNOWN`
  static const MEASUREMENT_LOCATION_UNKNOWN = 0;

  /// from: `static public final int MEASUREMENT_LOCATION_LEFT_WRIST`
  static const MEASUREMENT_LOCATION_LEFT_WRIST = 1;

  /// from: `static public final int MEASUREMENT_LOCATION_RIGHT_WRIST`
  static const MEASUREMENT_LOCATION_RIGHT_WRIST = 2;

  /// from: `static public final int MEASUREMENT_LOCATION_LEFT_UPPER_ARM`
  static const MEASUREMENT_LOCATION_LEFT_UPPER_ARM = 3;

  /// from: `static public final int MEASUREMENT_LOCATION_RIGHT_UPPER_ARM`
  static const MEASUREMENT_LOCATION_RIGHT_UPPER_ARM = 4;

  /// from: `static public final int BODY_POSITION_UNKNOWN`
  static const BODY_POSITION_UNKNOWN = 0;

  /// from: `static public final int BODY_POSITION_STANDING_UP`
  static const BODY_POSITION_STANDING_UP = 1;

  /// from: `static public final int BODY_POSITION_SITTING_DOWN`
  static const BODY_POSITION_SITTING_DOWN = 2;

  /// from: `static public final int BODY_POSITION_LYING_DOWN`
  static const BODY_POSITION_LYING_DOWN = 3;

  /// from: `static public final int BODY_POSITION_RECLINING`
  static const BODY_POSITION_RECLINING = 4;
  static final _id_MEASUREMENT_LOCATION_STRING_TO_INT_MAP =
      _class.staticFieldId(
    r'MEASUREMENT_LOCATION_STRING_TO_INT_MAP',
    r'Ljava/util/Map;',
  );

  /// from: `static public final java.util.Map MEASUREMENT_LOCATION_STRING_TO_INT_MAP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JMap<jni$_.JString?, jni$_.JInteger?>
      get MEASUREMENT_LOCATION_STRING_TO_INT_MAP =>
          _id_MEASUREMENT_LOCATION_STRING_TO_INT_MAP.get(
              _class,
              const jni$_.JMapType<jni$_.JString?, jni$_.JInteger?>(
                  jni$_.JStringNullableType(), jni$_.JIntegerNullableType()));

  static final _id_MEASUREMENT_LOCATION_INT_TO_STRING_MAP =
      _class.staticFieldId(
    r'MEASUREMENT_LOCATION_INT_TO_STRING_MAP',
    r'Ljava/util/Map;',
  );

  /// from: `static public final java.util.Map MEASUREMENT_LOCATION_INT_TO_STRING_MAP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JMap<jni$_.JInteger?, jni$_.JString?>
      get MEASUREMENT_LOCATION_INT_TO_STRING_MAP =>
          _id_MEASUREMENT_LOCATION_INT_TO_STRING_MAP.get(
              _class,
              const jni$_.JMapType<jni$_.JInteger?, jni$_.JString?>(
                  jni$_.JIntegerNullableType(), jni$_.JStringNullableType()));

  static final _id_BODY_POSITION_STRING_TO_INT_MAP = _class.staticFieldId(
    r'BODY_POSITION_STRING_TO_INT_MAP',
    r'Ljava/util/Map;',
  );

  /// from: `static public final java.util.Map BODY_POSITION_STRING_TO_INT_MAP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JMap<jni$_.JString?, jni$_.JInteger?>
      get BODY_POSITION_STRING_TO_INT_MAP =>
          _id_BODY_POSITION_STRING_TO_INT_MAP.get(
              _class,
              const jni$_.JMapType<jni$_.JString?, jni$_.JInteger?>(
                  jni$_.JStringNullableType(), jni$_.JIntegerNullableType()));

  static final _id_BODY_POSITION_INT_TO_STRING_MAP = _class.staticFieldId(
    r'BODY_POSITION_INT_TO_STRING_MAP',
    r'Ljava/util/Map;',
  );

  /// from: `static public final java.util.Map BODY_POSITION_INT_TO_STRING_MAP`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JMap<jni$_.JInteger?, jni$_.JString?>
      get BODY_POSITION_INT_TO_STRING_MAP =>
          _id_BODY_POSITION_INT_TO_STRING_MAP.get(
              _class,
              const jni$_.JMapType<jni$_.JInteger?, jni$_.JString?>(
                  jni$_.JIntegerNullableType(), jni$_.JStringNullableType()));

  static final _id_SYSTOLIC_AVG = _class.staticFieldId(
    r'SYSTOLIC_AVG',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric SYSTOLIC_AVG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get SYSTOLIC_AVG =>
      _id_SYSTOLIC_AVG.get(_class, const jni$_.JObjectType());

  static final _id_SYSTOLIC_MIN = _class.staticFieldId(
    r'SYSTOLIC_MIN',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric SYSTOLIC_MIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get SYSTOLIC_MIN =>
      _id_SYSTOLIC_MIN.get(_class, const jni$_.JObjectType());

  static final _id_SYSTOLIC_MAX = _class.staticFieldId(
    r'SYSTOLIC_MAX',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric SYSTOLIC_MAX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get SYSTOLIC_MAX =>
      _id_SYSTOLIC_MAX.get(_class, const jni$_.JObjectType());

  static final _id_DIASTOLIC_AVG = _class.staticFieldId(
    r'DIASTOLIC_AVG',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric DIASTOLIC_AVG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get DIASTOLIC_AVG =>
      _id_DIASTOLIC_AVG.get(_class, const jni$_.JObjectType());

  static final _id_DIASTOLIC_MIN = _class.staticFieldId(
    r'DIASTOLIC_MIN',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric DIASTOLIC_MIN`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get DIASTOLIC_MIN =>
      _id_DIASTOLIC_MIN.get(_class, const jni$_.JObjectType());

  static final _id_DIASTOLIC_MAX = _class.staticFieldId(
    r'DIASTOLIC_MAX',
    r'Landroidx/health/connect/client/aggregate/AggregateMetric;',
  );

  /// from: `static public final androidx.health.connect.client.aggregate.AggregateMetric DIASTOLIC_MAX`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject get DIASTOLIC_MAX =>
      _id_DIASTOLIC_MAX.get(_class, const jni$_.JObjectType());

  static final _id_new$ = _class.constructorId(
    r'(Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;Landroidx/health/connect/client/units/Pressure;Landroidx/health/connect/client/units/Pressure;II)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int)>();

  /// from: `public void <init>(java.time.Instant instant, java.time.ZoneOffset zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.Pressure pressure, androidx.health.connect.client.units.Pressure pressure1, int i, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BloodPressureRecord(
    instant$_.Instant instant,
    zoneoffset$_.ZoneOffset? zoneOffset,
    metadata$_.Metadata metadata,
    pressure$_.Pressure pressure,
    pressure$_.Pressure pressure1,
    int i,
    int i1,
  ) {
    final _$instant = instant.reference;
    final _$zoneOffset = zoneOffset?.reference ?? jni$_.jNullReference;
    final _$metadata = metadata.reference;
    final _$pressure = pressure.reference;
    final _$pressure1 = pressure1.reference;
    return BloodPressureRecord.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$instant.pointer,
            _$zoneOffset.pointer,
            _$metadata.pointer,
            _$pressure.pointer,
            _$pressure1.pointer,
            i,
            i1)
        .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Ljava/time/Instant;Ljava/time/ZoneOffset;Landroidx/health/connect/client/records/metadata/Metadata;Landroidx/health/connect/client/units/Pressure;Landroidx/health/connect/client/units/Pressure;IIILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(java.time.Instant instant, java.time.ZoneOffset zoneOffset, androidx.health.connect.client.records.metadata.Metadata metadata, androidx.health.connect.client.units.Pressure pressure, androidx.health.connect.client.units.Pressure pressure1, int i, int i1, int i2, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory BloodPressureRecord.new$1(
    instant$_.Instant? instant,
    zoneoffset$_.ZoneOffset? zoneOffset,
    metadata$_.Metadata? metadata,
    pressure$_.Pressure? pressure,
    pressure$_.Pressure? pressure1,
    int i,
    int i1,
    int i2,
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$instant = instant?.reference ?? jni$_.jNullReference;
    final _$zoneOffset = zoneOffset?.reference ?? jni$_.jNullReference;
    final _$metadata = metadata?.reference ?? jni$_.jNullReference;
    final _$pressure = pressure?.reference ?? jni$_.jNullReference;
    final _$pressure1 = pressure1?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return BloodPressureRecord.fromReference(_new$1(
            _class.reference.pointer,
            _id_new$1 as jni$_.JMethodIDPtr,
            _$instant.pointer,
            _$zoneOffset.pointer,
            _$metadata.pointer,
            _$pressure.pointer,
            _$pressure1.pointer,
            i,
            i1,
            i2,
            _$defaultConstructorMarker.pointer)
        .reference);
  }

  static final _id_getTime = _class.instanceMethodId(
    r'getTime',
    r'()Ljava/time/Instant;',
  );

  static final _getTime = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.Instant getTime()`
  /// The returned object must be released after use, by calling the [release] method.
  instant$_.Instant getTime() {
    return _getTime(reference.pointer, _id_getTime as jni$_.JMethodIDPtr)
        .object<instant$_.Instant>(const instant$_.$Instant$Type());
  }

  static final _id_getZoneOffset = _class.instanceMethodId(
    r'getZoneOffset',
    r'()Ljava/time/ZoneOffset;',
  );

  static final _getZoneOffset = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.time.ZoneOffset getZoneOffset()`
  /// The returned object must be released after use, by calling the [release] method.
  zoneoffset$_.ZoneOffset? getZoneOffset() {
    return _getZoneOffset(
            reference.pointer, _id_getZoneOffset as jni$_.JMethodIDPtr)
        .object<zoneoffset$_.ZoneOffset?>(
            const zoneoffset$_.$ZoneOffset$NullableType());
  }

  static final _id_getMetadata = _class.instanceMethodId(
    r'getMetadata',
    r'()Landroidx/health/connect/client/records/metadata/Metadata;',
  );

  static final _getMetadata = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.health.connect.client.records.metadata.Metadata getMetadata()`
  /// The returned object must be released after use, by calling the [release] method.
  metadata$_.Metadata getMetadata() {
    return _getMetadata(
            reference.pointer, _id_getMetadata as jni$_.JMethodIDPtr)
        .object<metadata$_.Metadata>(const metadata$_.$Metadata$Type());
  }

  static final _id_getSystolic = _class.instanceMethodId(
    r'getSystolic',
    r'()Landroidx/health/connect/client/units/Pressure;',
  );

  static final _getSystolic = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.units.Pressure getSystolic()`
  /// The returned object must be released after use, by calling the [release] method.
  pressure$_.Pressure getSystolic() {
    return _getSystolic(
            reference.pointer, _id_getSystolic as jni$_.JMethodIDPtr)
        .object<pressure$_.Pressure>(const pressure$_.$Pressure$Type());
  }

  static final _id_getDiastolic = _class.instanceMethodId(
    r'getDiastolic',
    r'()Landroidx/health/connect/client/units/Pressure;',
  );

  static final _getDiastolic = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.units.Pressure getDiastolic()`
  /// The returned object must be released after use, by calling the [release] method.
  pressure$_.Pressure getDiastolic() {
    return _getDiastolic(
            reference.pointer, _id_getDiastolic as jni$_.JMethodIDPtr)
        .object<pressure$_.Pressure>(const pressure$_.$Pressure$Type());
  }

  static final _id_getBodyPosition = _class.instanceMethodId(
    r'getBodyPosition',
    r'()I',
  );

  static final _getBodyPosition = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getBodyPosition()`
  int getBodyPosition() {
    return _getBodyPosition(
            reference.pointer, _id_getBodyPosition as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getMeasurementLocation = _class.instanceMethodId(
    r'getMeasurementLocation',
    r'()I',
  );

  static final _getMeasurementLocation = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getMeasurementLocation()`
  int getMeasurementLocation() {
    return _getMeasurementLocation(
            reference.pointer, _id_getMeasurementLocation as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_toString$1 = _class.instanceMethodId(
    r'toString',
    r'()Ljava/lang/String;',
  );

  static final _toString$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public java.lang.String toString()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString toString$1() {
    return _toString$1(reference.pointer, _id_toString$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }
}

final class $BloodPressureRecord$NullableType
    extends jni$_.JObjType<BloodPressureRecord?> {
  @jni$_.internal
  const $BloodPressureRecord$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : BloodPressureRecord.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$NullableType) &&
        other is $BloodPressureRecord$NullableType;
  }
}

final class $BloodPressureRecord$Type
    extends jni$_.JObjType<BloodPressureRecord> {
  @jni$_.internal
  const $BloodPressureRecord$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/records/BloodPressureRecord;';

  @jni$_.internal
  @core$_.override
  BloodPressureRecord fromReference(jni$_.JReference reference) =>
      BloodPressureRecord.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<BloodPressureRecord?> get nullableType =>
      const $BloodPressureRecord$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($BloodPressureRecord$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($BloodPressureRecord$Type) &&
        other is $BloodPressureRecord$Type;
  }
}
