// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import 'PermissionController.dart' as permissioncontroller$_;

import 'request/ReadRecordsRequest.dart' as readrecordsrequest$_;

import 'response/InsertRecordsResponse.dart' as insertrecordsresponse$_;

import 'response/ReadRecordsResponse.dart' as readrecordsresponse$_;

import 'time/TimeRangeFilter.dart' as timerangefilter$_;

/// from: `androidx.health.connect.client.HealthConnectClient$Companion$AvailabilityStatus`
class HealthConnectClient$Companion$AvailabilityStatus extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient$Companion$AvailabilityStatus> $type;

  @jni$_.internal
  HealthConnectClient$Companion$AvailabilityStatus.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient$Companion$AvailabilityStatus');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $HealthConnectClient$Companion$AvailabilityStatus$NullableType();
  static const type = $HealthConnectClient$Companion$AvailabilityStatus$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_
      .Map<int, $HealthConnectClient$Companion$AvailabilityStatus> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $HealthConnectClient$Companion$AvailabilityStatus $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.HealthConnectClient$Companion$AvailabilityStatus',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory HealthConnectClient$Companion$AvailabilityStatus.implement(
    $HealthConnectClient$Companion$AvailabilityStatus $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return HealthConnectClient$Companion$AvailabilityStatus.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $HealthConnectClient$Companion$AvailabilityStatus {
  factory $HealthConnectClient$Companion$AvailabilityStatus() =
      _$HealthConnectClient$Companion$AvailabilityStatus;
}

final class _$HealthConnectClient$Companion$AvailabilityStatus
    with $HealthConnectClient$Companion$AvailabilityStatus {
  _$HealthConnectClient$Companion$AvailabilityStatus();
}

final class $HealthConnectClient$Companion$AvailabilityStatus$NullableType
    extends jni$_.JObjType<HealthConnectClient$Companion$AvailabilityStatus?> {
  @jni$_.internal
  const $HealthConnectClient$Companion$AvailabilityStatus$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion$AvailabilityStatus;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion$AvailabilityStatus? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient$Companion$AvailabilityStatus.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion$AvailabilityStatus?>
      get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($HealthConnectClient$Companion$AvailabilityStatus$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($HealthConnectClient$Companion$AvailabilityStatus$NullableType) &&
        other is $HealthConnectClient$Companion$AvailabilityStatus$NullableType;
  }
}

final class $HealthConnectClient$Companion$AvailabilityStatus$Type
    extends jni$_.JObjType<HealthConnectClient$Companion$AvailabilityStatus> {
  @jni$_.internal
  const $HealthConnectClient$Companion$AvailabilityStatus$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion$AvailabilityStatus;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion$AvailabilityStatus fromReference(
          jni$_.JReference reference) =>
      HealthConnectClient$Companion$AvailabilityStatus.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion$AvailabilityStatus?>
      get nullableType =>
          const $HealthConnectClient$Companion$AvailabilityStatus$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($HealthConnectClient$Companion$AvailabilityStatus$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($HealthConnectClient$Companion$AvailabilityStatus$Type) &&
        other is $HealthConnectClient$Companion$AvailabilityStatus$Type;
  }
}

/// from: `androidx.health.connect.client.HealthConnectClient$Companion`
class HealthConnectClient$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient$Companion> $type;

  @jni$_.internal
  HealthConnectClient$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthConnectClient$Companion$NullableType();
  static const type = $HealthConnectClient$Companion$Type();
  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r'DEFAULT_PROVIDER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni$_.JStringType());

  /// from: `static public final int DEFAULT_PROVIDER_MIN_VERSION_CODE`
  static const DEFAULT_PROVIDER_MIN_VERSION_CODE = 68623;

  /// from: `static public final int SDK_UNAVAILABLE`
  static const SDK_UNAVAILABLE = 1;

  /// from: `static public final int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED`
  static const SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED = 2;

  /// from: `static public final int SDK_AVAILABLE`
  static const SDK_AVAILABLE = 3;
  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r'HEALTH_CONNECT_CLIENT_TAG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni$_.JStringType());

  static final _id_getHealthConnectSettingsAction = _class.instanceMethodId(
    r'getHealthConnectSettingsAction',
    r'()Ljava/lang/String;',
  );

  static final _getHealthConnectSettingsAction =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final java.lang.String getHealthConnectSettingsAction()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString getHealthConnectSettingsAction() {
    return _getHealthConnectSettingsAction(reference.pointer,
            _id_getHealthConnectSettingsAction as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getSdkStatus = _class.instanceMethodId(
    r'getSdkStatus',
    r'(Landroid/content/Context;Ljava/lang/String;)I',
  );

  static final _getSdkStatus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int getSdkStatus(android.content.Context context, java.lang.String string)`
  int getSdkStatus(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getSdkStatus(
            reference.pointer,
            _id_getSdkStatus as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .integer;
  }

  static final _id_getOrCreate = _class.instanceMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getOrCreate(
            reference.pointer,
            _id_getOrCreate as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_getHealthConnectManageDataIntent = _class.instanceMethodId(
    r'getHealthConnectManageDataIntent',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getHealthConnectManageDataIntent =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.Intent getHealthConnectManageDataIntent(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getHealthConnectManageDataIntent(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getHealthConnectManageDataIntent(
            reference.pointer,
            _id_getHealthConnectManageDataIntent as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getSdkStatus$1 = _class.instanceMethodId(
    r'getSdkStatus',
    r'(Landroid/content/Context;)I',
  );

  static final _getSdkStatus$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final int getSdkStatus(android.content.Context context)`
  int getSdkStatus$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getSdkStatus$1(reference.pointer,
            _id_getSdkStatus$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .integer;
  }

  static final _id_getOrCreate$1 = _class.instanceMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  HealthConnectClient getOrCreate$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getOrCreate$1(reference.pointer,
            _id_getOrCreate$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_getHealthConnectManageDataIntent$1 = _class.instanceMethodId(
    r'getHealthConnectManageDataIntent',
    r'(Landroid/content/Context;)Landroid/content/Intent;',
  );

  static final _getHealthConnectManageDataIntent$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final android.content.Intent getHealthConnectManageDataIntent(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getHealthConnectManageDataIntent$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getHealthConnectManageDataIntent$1(
            reference.pointer,
            _id_getHealthConnectManageDataIntent$1 as jni$_.JMethodIDPtr,
            _$context.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }
}

final class $HealthConnectClient$Companion$NullableType
    extends jni$_.JObjType<HealthConnectClient$Companion?> {
  @jni$_.internal
  const $HealthConnectClient$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Companion$NullableType) &&
        other is $HealthConnectClient$Companion$NullableType;
  }
}

final class $HealthConnectClient$Companion$Type
    extends jni$_.JObjType<HealthConnectClient$Companion> {
  @jni$_.internal
  const $HealthConnectClient$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$Companion;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$Companion fromReference(jni$_.JReference reference) =>
      HealthConnectClient$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$Companion?> get nullableType =>
      const $HealthConnectClient$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Companion$Type) &&
        other is $HealthConnectClient$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.HealthConnectClient$DefaultImpls`
class HealthConnectClient$DefaultImpls extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient$DefaultImpls> $type;

  @jni$_.internal
  HealthConnectClient$DefaultImpls.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient$DefaultImpls');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthConnectClient$DefaultImpls$NullableType();
  static const type = $HealthConnectClient$DefaultImpls$Type();
  static final _id_getFeatures = _class.staticMethodId(
    r'getFeatures',
    r'(Landroidx/health/connect/client/HealthConnectClient;)Landroidx/health/connect/client/HealthConnectFeatures;',
  );

  static final _getFeatures = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.HealthConnectFeatures getFeatures(androidx.health.connect.client.HealthConnectClient healthConnectClient)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getFeatures(
    HealthConnectClient healthConnectClient,
  ) {
    final _$healthConnectClient = healthConnectClient.reference;
    return _getFeatures(
            _class.reference.pointer,
            _id_getFeatures as jni$_.JMethodIDPtr,
            _$healthConnectClient.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }
}

final class $HealthConnectClient$DefaultImpls$NullableType
    extends jni$_.JObjType<HealthConnectClient$DefaultImpls?> {
  @jni$_.internal
  const $HealthConnectClient$DefaultImpls$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$DefaultImpls;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$DefaultImpls? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient$DefaultImpls.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$DefaultImpls?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$DefaultImpls$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($HealthConnectClient$DefaultImpls$NullableType) &&
        other is $HealthConnectClient$DefaultImpls$NullableType;
  }
}

final class $HealthConnectClient$DefaultImpls$Type
    extends jni$_.JObjType<HealthConnectClient$DefaultImpls> {
  @jni$_.internal
  const $HealthConnectClient$DefaultImpls$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient$DefaultImpls;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient$DefaultImpls fromReference(jni$_.JReference reference) =>
      HealthConnectClient$DefaultImpls.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient$DefaultImpls?> get nullableType =>
      const $HealthConnectClient$DefaultImpls$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$DefaultImpls$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$DefaultImpls$Type) &&
        other is $HealthConnectClient$DefaultImpls$Type;
  }
}

/// from: `androidx.health.connect.client.HealthConnectClient`
class HealthConnectClient extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<HealthConnectClient> $type;

  @jni$_.internal
  HealthConnectClient.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/HealthConnectClient');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $HealthConnectClient$NullableType();
  static const type = $HealthConnectClient$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/HealthConnectClient$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.HealthConnectClient$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient$Companion get Companion =>
      _id_Companion.get(_class, const $HealthConnectClient$Companion$Type());

  static final _id_DEFAULT_PROVIDER_PACKAGE_NAME = _class.staticFieldId(
    r'DEFAULT_PROVIDER_PACKAGE_NAME',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String DEFAULT_PROVIDER_PACKAGE_NAME`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get DEFAULT_PROVIDER_PACKAGE_NAME =>
      _id_DEFAULT_PROVIDER_PACKAGE_NAME.get(_class, const jni$_.JStringType());

  /// from: `static public final int DEFAULT_PROVIDER_MIN_VERSION_CODE`
  static const DEFAULT_PROVIDER_MIN_VERSION_CODE = 68623;

  /// from: `static public final int SDK_UNAVAILABLE`
  static const SDK_UNAVAILABLE = 1;

  /// from: `static public final int SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED`
  static const SDK_UNAVAILABLE_PROVIDER_UPDATE_REQUIRED = 2;

  /// from: `static public final int SDK_AVAILABLE`
  static const SDK_AVAILABLE = 3;
  static final _id_HEALTH_CONNECT_CLIENT_TAG = _class.staticFieldId(
    r'HEALTH_CONNECT_CLIENT_TAG',
    r'Ljava/lang/String;',
  );

  /// from: `static public final java.lang.String HEALTH_CONNECT_CLIENT_TAG`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString get HEALTH_CONNECT_CLIENT_TAG =>
      _id_HEALTH_CONNECT_CLIENT_TAG.get(_class, const jni$_.JStringType());

  static final _id_getPermissionController = _class.instanceMethodId(
    r'getPermissionController',
    r'()Landroidx/health/connect/client/PermissionController;',
  );

  static final _getPermissionController = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public abstract androidx.health.connect.client.PermissionController getPermissionController()`
  /// The returned object must be released after use, by calling the [release] method.
  permissioncontroller$_.PermissionController getPermissionController() {
    return _getPermissionController(reference.pointer,
            _id_getPermissionController as jni$_.JMethodIDPtr)
        .object<permissioncontroller$_.PermissionController>(
            const permissioncontroller$_.$PermissionController$Type());
  }

  static final _id_getFeatures = _class.instanceMethodId(
    r'getFeatures',
    r'()Landroidx/health/connect/client/HealthConnectFeatures;',
  );

  static final _getFeatures = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public androidx.health.connect.client.HealthConnectFeatures getFeatures()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getFeatures() {
    return _getFeatures(
            reference.pointer, _id_getFeatures as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_insertRecords = _class.instanceMethodId(
    r'insertRecords',
    r'(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _insertRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object insertRecords(java.util.List list, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<insertrecordsresponse$_.InsertRecordsResponse> insertRecords(
    jni$_.JList<jni$_.JObject?> list,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$list = list.reference;
    final $r = _insertRecords(
            reference.pointer,
            _id_insertRecords as jni$_.JMethodIDPtr,
            _$list.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const insertrecordsresponse$_.$InsertRecordsResponse$Type(),
        releaseOriginal: true);
  }

  static final _id_updateRecords = _class.instanceMethodId(
    r'updateRecords',
    r'(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _updateRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object updateRecords(java.util.List list, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> updateRecords(
    jni$_.JList<jni$_.JObject?> list,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$list = list.reference;
    final $r = _updateRecords(
            reference.pointer,
            _id_updateRecords as jni$_.JMethodIDPtr,
            _$list.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_deleteRecords = _class.instanceMethodId(
    r'deleteRecords',
    r'(Lkotlin/reflect/KClass;Ljava/util/List;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, java.util.List list, java.util.List list1, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> deleteRecords(
    jni$_.JObject kClass,
    jni$_.JList<jni$_.JString?> list,
    jni$_.JList<jni$_.JString?> list1,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$list = list.reference;
    final _$list1 = list1.reference;
    final $r = _deleteRecords(
            reference.pointer,
            _id_deleteRecords as jni$_.JMethodIDPtr,
            _$kClass.pointer,
            _$list.pointer,
            _$list1.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_deleteRecords$1 = _class.instanceMethodId(
    r'deleteRecords',
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _deleteRecords$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object deleteRecords(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> deleteRecords$1(
    jni$_.JObject kClass,
    timerangefilter$_.TimeRangeFilter timeRangeFilter,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final $r = _deleteRecords$1(
            reference.pointer,
            _id_deleteRecords$1 as jni$_.JMethodIDPtr,
            _$kClass.pointer,
            _$timeRangeFilter.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_readRecord = _class.instanceMethodId(
    r'readRecord',
    r'(Lkotlin/reflect/KClass;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _readRecord = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object readRecord(kotlin.reflect.KClass kClass, java.lang.String string, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> readRecord<$T extends jni$_.JObject>(
    jni$_.JObject kClass,
    jni$_.JString string, {
    required jni$_.JObjType<$T> T,
  }) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$kClass = kClass.reference;
    final _$string = string.reference;
    final $r = _readRecord(
            reference.pointer,
            _id_readRecord as jni$_.JMethodIDPtr,
            _$kClass.pointer,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_readRecords = _class.instanceMethodId(
    r'readRecords',
    r'(Landroidx/health/connect/client/request/ReadRecordsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _readRecords = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object readRecords(androidx.health.connect.client.request.ReadRecordsRequest readRecordsRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<readrecordsresponse$_.ReadRecordsResponse<$T>>
      readRecords<$T extends jni$_.JObject>(
    readrecordsrequest$_.ReadRecordsRequest<$T> readRecordsRequest, {
    jni$_.JObjType<$T>? T,
  }) async {
    T ??= jni$_.lowestCommonSuperType([
      (readRecordsRequest.$type
              as readrecordsrequest$_.$ReadRecordsRequest$Type<core$_.dynamic>)
          .T,
    ]) as jni$_.JObjType<$T>;
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$readRecordsRequest = readRecordsRequest.reference;
    final $r = _readRecords(
            reference.pointer,
            _id_readRecords as jni$_.JMethodIDPtr,
            _$readRecordsRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(readrecordsresponse$_.$ReadRecordsResponse$Type<$T>(T),
        releaseOriginal: true);
  }

  static final _id_aggregate = _class.instanceMethodId(
    r'aggregate',
    r'(Landroidx/health/connect/client/request/AggregateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregate(androidx.health.connect.client.request.AggregateRequest aggregateRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> aggregate(
    jni$_.JObject aggregateRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateRequest = aggregateRequest.reference;
    final $r = _aggregate(
            reference.pointer,
            _id_aggregate as jni$_.JMethodIDPtr,
            _$aggregateRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_aggregateGroupByDuration = _class.instanceMethodId(
    r'aggregateGroupByDuration',
    r'(Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregateGroupByDuration = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregateGroupByDuration(androidx.health.connect.client.request.AggregateGroupByDurationRequest aggregateGroupByDurationRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JList<jni$_.JObject>> aggregateGroupByDuration(
    jni$_.JObject aggregateGroupByDurationRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateGroupByDurationRequest =
        aggregateGroupByDurationRequest.reference;
    final $r = _aggregateGroupByDuration(
            reference.pointer,
            _id_aggregateGroupByDuration as jni$_.JMethodIDPtr,
            _$aggregateGroupByDurationRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType()),
        releaseOriginal: true);
  }

  static final _id_aggregateGroupByPeriod = _class.instanceMethodId(
    r'aggregateGroupByPeriod',
    r'(Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _aggregateGroupByPeriod = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object aggregateGroupByPeriod(androidx.health.connect.client.request.AggregateGroupByPeriodRequest aggregateGroupByPeriodRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JList<jni$_.JObject>> aggregateGroupByPeriod(
    jni$_.JObject aggregateGroupByPeriodRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$aggregateGroupByPeriodRequest =
        aggregateGroupByPeriodRequest.reference;
    final $r = _aggregateGroupByPeriod(
            reference.pointer,
            _id_aggregateGroupByPeriod as jni$_.JMethodIDPtr,
            _$aggregateGroupByPeriodRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JListType<jni$_.JObject>(jni$_.JObjectType()),
        releaseOriginal: true);
  }

  static final _id_getChangesToken = _class.instanceMethodId(
    r'getChangesToken',
    r'(Landroidx/health/connect/client/request/ChangesTokenRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getChangesToken = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getChangesToken(androidx.health.connect.client.request.ChangesTokenRequest changesTokenRequest, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JString> getChangesToken(
    jni$_.JObject changesTokenRequest,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$changesTokenRequest = changesTokenRequest.reference;
    final $r = _getChangesToken(
            reference.pointer,
            _id_getChangesToken as jni$_.JMethodIDPtr,
            _$changesTokenRequest.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JStringType(), releaseOriginal: true);
  }

  static final _id_getChanges = _class.instanceMethodId(
    r'getChanges',
    r'(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getChanges = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getChanges(java.lang.String string, kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> getChanges(
    jni$_.JString string,
  ) async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);
    final _$string = string.reference;
    final $r = _getChanges(
            reference.pointer,
            _id_getChanges as jni$_.JMethodIDPtr,
            _$string.pointer,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_getHealthConnectSettingsAction = _class.staticMethodId(
    r'getHealthConnectSettingsAction',
    r'()Ljava/lang/String;',
  );

  static final _getHealthConnectSettingsAction =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `static public java.lang.String getHealthConnectSettingsAction()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JString getHealthConnectSettingsAction() {
    return _getHealthConnectSettingsAction(_class.reference.pointer,
            _id_getHealthConnectSettingsAction as jni$_.JMethodIDPtr)
        .object<jni$_.JString>(const jni$_.JStringType());
  }

  static final _id_getSdkStatus = _class.staticMethodId(
    r'getSdkStatus',
    r'(Landroid/content/Context;Ljava/lang/String;)I',
  );

  static final _getSdkStatus = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticIntMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public int getSdkStatus(android.content.Context context, java.lang.String string)`
  static int getSdkStatus(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getSdkStatus(
            _class.reference.pointer,
            _id_getSdkStatus as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .integer;
  }

  static final _id_getOrCreate = _class.staticMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getOrCreate(
            _class.reference.pointer,
            _id_getOrCreate as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_getHealthConnectManageDataIntent = _class.staticMethodId(
    r'getHealthConnectManageDataIntent',
    r'(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;',
  );

  static final _getHealthConnectManageDataIntent =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<
                          (
                            jni$_.Pointer<jni$_.Void>,
                            jni$_.Pointer<jni$_.Void>
                          )>)>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getHealthConnectManageDataIntent(android.content.Context context, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getHealthConnectManageDataIntent(
    jni$_.JObject context,
    jni$_.JString string,
  ) {
    final _$context = context.reference;
    final _$string = string.reference;
    return _getHealthConnectManageDataIntent(
            _class.reference.pointer,
            _id_getHealthConnectManageDataIntent as jni$_.JMethodIDPtr,
            _$context.pointer,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getSdkStatus$1 = _class.staticMethodId(
    r'getSdkStatus',
    r'(Landroid/content/Context;)I',
  );

  static final _getSdkStatus$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticIntMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public int getSdkStatus(android.content.Context context)`
  static int getSdkStatus$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getSdkStatus$1(_class.reference.pointer,
            _id_getSdkStatus$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .integer;
  }

  static final _id_getOrCreate$1 = _class.staticMethodId(
    r'getOrCreate',
    r'(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;',
  );

  static final _getOrCreate$1 = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallStaticObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.health.connect.client.HealthConnectClient getOrCreate(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static HealthConnectClient getOrCreate$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getOrCreate$1(_class.reference.pointer,
            _id_getOrCreate$1 as jni$_.JMethodIDPtr, _$context.pointer)
        .object<HealthConnectClient>(const $HealthConnectClient$Type());
  }

  static final _id_getHealthConnectManageDataIntent$1 = _class.staticMethodId(
    r'getHealthConnectManageDataIntent',
    r'(Landroid/content/Context;)Landroid/content/Intent;',
  );

  static final _getHealthConnectManageDataIntent$1 =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public android.content.Intent getHealthConnectManageDataIntent(android.content.Context context)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject getHealthConnectManageDataIntent$1(
    jni$_.JObject context,
  ) {
    final _$context = context.reference;
    return _getHealthConnectManageDataIntent$1(
            _class.reference.pointer,
            _id_getHealthConnectManageDataIntent$1 as jni$_.JMethodIDPtr,
            _$context.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $HealthConnectClient> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'getPermissionController()Landroidx/health/connect/client/PermissionController;') {
        final $r = _$impls[$p]!.getPermissionController();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getFeatures()Landroidx/health/connect/client/HealthConnectFeatures;') {
        final $r = _$impls[$p]!.getFeatures();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'insertRecords(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.insertRecords(
          $a![0]!.as(
              const jni$_.JListType<jni$_.JObject?>(
                  jni$_.JObjectNullableType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'updateRecords(Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.updateRecords(
          $a![0]!.as(
              const jni$_.JListType<jni$_.JObject?>(
                  jni$_.JObjectNullableType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'deleteRecords(Lkotlin/reflect/KClass;Ljava/util/List;Ljava/util/List;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteRecords(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
          $a![2]!.as(
              const jni$_.JListType<jni$_.JString?>(
                  jni$_.JStringNullableType()),
              releaseOriginal: true),
          $a![3]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'deleteRecords(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.deleteRecords$1(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const timerangefilter$_.$TimeRangeFilter$Type(),
              releaseOriginal: true),
          $a![2]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'readRecord(Lkotlin/reflect/KClass;Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.readRecord(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![2]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'readRecords(Landroidx/health/connect/client/request/ReadRecordsRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.readRecords(
          $a![0]!.as(
              const readrecordsrequest$_
                  .$ReadRecordsRequest$Type<jni$_.JObject>(jni$_.JObjectType()),
              releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregate(Landroidx/health/connect/client/request/AggregateRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregate(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregateGroupByDuration(Landroidx/health/connect/client/request/AggregateGroupByDurationRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregateGroupByDuration(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'aggregateGroupByPeriod(Landroidx/health/connect/client/request/AggregateGroupByPeriodRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.aggregateGroupByPeriod(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getChangesToken(Landroidx/health/connect/client/request/ChangesTokenRequest;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getChangesToken(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getChanges(Ljava/lang/String;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getChanges(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getHealthConnectSettingsAction()Ljava/lang/String;') {
        final $r = _$impls[$p]!.getHealthConnectSettingsAction();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getSdkStatus(Landroid/content/Context;Ljava/lang/String;)I') {
        final $r = _$impls[$p]!.getSdkStatus(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d ==
          r'getOrCreate(Landroid/content/Context;Ljava/lang/String;)Landroidx/health/connect/client/HealthConnectClient;') {
        final $r = _$impls[$p]!.getOrCreate(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getHealthConnectManageDataIntent(Landroid/content/Context;Ljava/lang/String;)Landroid/content/Intent;') {
        final $r = _$impls[$p]!.getHealthConnectManageDataIntent(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
          $a![1]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d == r'getSdkStatus(Landroid/content/Context;)I') {
        final $r = _$impls[$p]!.getSdkStatus$1(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return jni$_.JInteger($r).reference.toPointer();
      }
      if ($d ==
          r'getOrCreate(Landroid/content/Context;)Landroidx/health/connect/client/HealthConnectClient;') {
        final $r = _$impls[$p]!.getOrCreate$1(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'getHealthConnectManageDataIntent(Landroid/content/Context;)Landroid/content/Intent;') {
        final $r = _$impls[$p]!.getHealthConnectManageDataIntent$1(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $HealthConnectClient $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.HealthConnectClient',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory HealthConnectClient.implement(
    $HealthConnectClient $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return HealthConnectClient.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $HealthConnectClient {
  factory $HealthConnectClient({
    required permissioncontroller$_.PermissionController Function()
        getPermissionController,
    required jni$_.JObject Function() getFeatures,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        insertRecords,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        updateRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            jni$_.JList<jni$_.JString?> list,
            jni$_.JList<jni$_.JString?> list1,
            jni$_.JObject continuation)
        deleteRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            timerangefilter$_.TimeRangeFilter timeRangeFilter,
            jni$_.JObject continuation)
        deleteRecords$1,
    required jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
            jni$_.JObject continuation)
        readRecord,
    required jni$_.JObject Function(
            readrecordsrequest$_.ReadRecordsRequest<jni$_.JObject>
                readRecordsRequest,
            jni$_.JObject continuation)
        readRecords,
    required jni$_.JObject Function(
            jni$_.JObject aggregateRequest, jni$_.JObject continuation)
        aggregate,
    required jni$_.JObject Function(
            jni$_.JObject aggregateGroupByDurationRequest,
            jni$_.JObject continuation)
        aggregateGroupByDuration,
    required jni$_.JObject Function(jni$_.JObject aggregateGroupByPeriodRequest,
            jni$_.JObject continuation)
        aggregateGroupByPeriod,
    required jni$_.JObject Function(
            jni$_.JObject changesTokenRequest, jni$_.JObject continuation)
        getChangesToken,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        getChanges,
    required jni$_.JString Function() getHealthConnectSettingsAction,
    required int Function(jni$_.JObject context, jni$_.JString string)
        getSdkStatus,
    required HealthConnectClient Function(
            jni$_.JObject context, jni$_.JString string)
        getOrCreate,
    required jni$_.JObject Function(jni$_.JObject context, jni$_.JString string)
        getHealthConnectManageDataIntent,
    required int Function(jni$_.JObject context) getSdkStatus$1,
    required HealthConnectClient Function(jni$_.JObject context) getOrCreate$1,
    required jni$_.JObject Function(jni$_.JObject context)
        getHealthConnectManageDataIntent$1,
  }) = _$HealthConnectClient;

  permissioncontroller$_.PermissionController getPermissionController();
  jni$_.JObject getFeatures();
  jni$_.JObject insertRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation);
  jni$_.JObject updateRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation);
  jni$_.JObject deleteRecords(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation);
  jni$_.JObject deleteRecords$1(
      jni$_.JObject kClass,
      timerangefilter$_.TimeRangeFilter timeRangeFilter,
      jni$_.JObject continuation);
  jni$_.JObject readRecord(
      jni$_.JObject kClass, jni$_.JString string, jni$_.JObject continuation);
  jni$_.JObject readRecords(
      readrecordsrequest$_.ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation);
  jni$_.JObject aggregate(
      jni$_.JObject aggregateRequest, jni$_.JObject continuation);
  jni$_.JObject aggregateGroupByDuration(
      jni$_.JObject aggregateGroupByDurationRequest,
      jni$_.JObject continuation);
  jni$_.JObject aggregateGroupByPeriod(
      jni$_.JObject aggregateGroupByPeriodRequest, jni$_.JObject continuation);
  jni$_.JObject getChangesToken(
      jni$_.JObject changesTokenRequest, jni$_.JObject continuation);
  jni$_.JObject getChanges(jni$_.JString string, jni$_.JObject continuation);
  jni$_.JString getHealthConnectSettingsAction();
  int getSdkStatus(jni$_.JObject context, jni$_.JString string);
  HealthConnectClient getOrCreate(jni$_.JObject context, jni$_.JString string);
  jni$_.JObject getHealthConnectManageDataIntent(
      jni$_.JObject context, jni$_.JString string);
  int getSdkStatus$1(jni$_.JObject context);
  HealthConnectClient getOrCreate$1(jni$_.JObject context);
  jni$_.JObject getHealthConnectManageDataIntent$1(jni$_.JObject context);
}

final class _$HealthConnectClient with $HealthConnectClient {
  _$HealthConnectClient({
    required permissioncontroller$_.PermissionController Function()
        getPermissionController,
    required jni$_.JObject Function() getFeatures,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        insertRecords,
    required jni$_.JObject Function(
            jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
        updateRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            jni$_.JList<jni$_.JString?> list,
            jni$_.JList<jni$_.JString?> list1,
            jni$_.JObject continuation)
        deleteRecords,
    required jni$_.JObject Function(
            jni$_.JObject kClass,
            timerangefilter$_.TimeRangeFilter timeRangeFilter,
            jni$_.JObject continuation)
        deleteRecords$1,
    required jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
            jni$_.JObject continuation)
        readRecord,
    required jni$_.JObject Function(
            readrecordsrequest$_.ReadRecordsRequest<jni$_.JObject>
                readRecordsRequest,
            jni$_.JObject continuation)
        readRecords,
    required jni$_.JObject Function(
            jni$_.JObject aggregateRequest, jni$_.JObject continuation)
        aggregate,
    required jni$_.JObject Function(
            jni$_.JObject aggregateGroupByDurationRequest,
            jni$_.JObject continuation)
        aggregateGroupByDuration,
    required jni$_.JObject Function(jni$_.JObject aggregateGroupByPeriodRequest,
            jni$_.JObject continuation)
        aggregateGroupByPeriod,
    required jni$_.JObject Function(
            jni$_.JObject changesTokenRequest, jni$_.JObject continuation)
        getChangesToken,
    required jni$_.JObject Function(
            jni$_.JString string, jni$_.JObject continuation)
        getChanges,
    required jni$_.JString Function() getHealthConnectSettingsAction,
    required int Function(jni$_.JObject context, jni$_.JString string)
        getSdkStatus,
    required HealthConnectClient Function(
            jni$_.JObject context, jni$_.JString string)
        getOrCreate,
    required jni$_.JObject Function(jni$_.JObject context, jni$_.JString string)
        getHealthConnectManageDataIntent,
    required int Function(jni$_.JObject context) getSdkStatus$1,
    required HealthConnectClient Function(jni$_.JObject context) getOrCreate$1,
    required jni$_.JObject Function(jni$_.JObject context)
        getHealthConnectManageDataIntent$1,
  })  : _getPermissionController = getPermissionController,
        _getFeatures = getFeatures,
        _insertRecords = insertRecords,
        _updateRecords = updateRecords,
        _deleteRecords = deleteRecords,
        _deleteRecords$1 = deleteRecords$1,
        _readRecord = readRecord,
        _readRecords = readRecords,
        _aggregate = aggregate,
        _aggregateGroupByDuration = aggregateGroupByDuration,
        _aggregateGroupByPeriod = aggregateGroupByPeriod,
        _getChangesToken = getChangesToken,
        _getChanges = getChanges,
        _getHealthConnectSettingsAction = getHealthConnectSettingsAction,
        _getSdkStatus = getSdkStatus,
        _getOrCreate = getOrCreate,
        _getHealthConnectManageDataIntent = getHealthConnectManageDataIntent,
        _getSdkStatus$1 = getSdkStatus$1,
        _getOrCreate$1 = getOrCreate$1,
        _getHealthConnectManageDataIntent$1 =
            getHealthConnectManageDataIntent$1;

  final permissioncontroller$_.PermissionController Function()
      _getPermissionController;
  final jni$_.JObject Function() _getFeatures;
  final jni$_.JObject Function(
          jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
      _insertRecords;
  final jni$_.JObject Function(
          jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation)
      _updateRecords;
  final jni$_.JObject Function(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation) _deleteRecords;
  final jni$_.JObject Function(
      jni$_.JObject kClass,
      timerangefilter$_.TimeRangeFilter timeRangeFilter,
      jni$_.JObject continuation) _deleteRecords$1;
  final jni$_.JObject Function(jni$_.JObject kClass, jni$_.JString string,
      jni$_.JObject continuation) _readRecord;
  final jni$_.JObject Function(
      readrecordsrequest$_.ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation) _readRecords;
  final jni$_.JObject Function(
      jni$_.JObject aggregateRequest, jni$_.JObject continuation) _aggregate;
  final jni$_.JObject Function(jni$_.JObject aggregateGroupByDurationRequest,
      jni$_.JObject continuation) _aggregateGroupByDuration;
  final jni$_.JObject Function(jni$_.JObject aggregateGroupByPeriodRequest,
      jni$_.JObject continuation) _aggregateGroupByPeriod;
  final jni$_.JObject Function(
          jni$_.JObject changesTokenRequest, jni$_.JObject continuation)
      _getChangesToken;
  final jni$_.JObject Function(jni$_.JString string, jni$_.JObject continuation)
      _getChanges;
  final jni$_.JString Function() _getHealthConnectSettingsAction;
  final int Function(jni$_.JObject context, jni$_.JString string) _getSdkStatus;
  final HealthConnectClient Function(
      jni$_.JObject context, jni$_.JString string) _getOrCreate;
  final jni$_.JObject Function(jni$_.JObject context, jni$_.JString string)
      _getHealthConnectManageDataIntent;
  final int Function(jni$_.JObject context) _getSdkStatus$1;
  final HealthConnectClient Function(jni$_.JObject context) _getOrCreate$1;
  final jni$_.JObject Function(jni$_.JObject context)
      _getHealthConnectManageDataIntent$1;

  permissioncontroller$_.PermissionController getPermissionController() {
    return _getPermissionController();
  }

  jni$_.JObject getFeatures() {
    return _getFeatures();
  }

  jni$_.JObject insertRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation) {
    return _insertRecords(list, continuation);
  }

  jni$_.JObject updateRecords(
      jni$_.JList<jni$_.JObject?> list, jni$_.JObject continuation) {
    return _updateRecords(list, continuation);
  }

  jni$_.JObject deleteRecords(
      jni$_.JObject kClass,
      jni$_.JList<jni$_.JString?> list,
      jni$_.JList<jni$_.JString?> list1,
      jni$_.JObject continuation) {
    return _deleteRecords(kClass, list, list1, continuation);
  }

  jni$_.JObject deleteRecords$1(
      jni$_.JObject kClass,
      timerangefilter$_.TimeRangeFilter timeRangeFilter,
      jni$_.JObject continuation) {
    return _deleteRecords$1(kClass, timeRangeFilter, continuation);
  }

  jni$_.JObject readRecord(
      jni$_.JObject kClass, jni$_.JString string, jni$_.JObject continuation) {
    return _readRecord(kClass, string, continuation);
  }

  jni$_.JObject readRecords(
      readrecordsrequest$_.ReadRecordsRequest<jni$_.JObject> readRecordsRequest,
      jni$_.JObject continuation) {
    return _readRecords(readRecordsRequest, continuation);
  }

  jni$_.JObject aggregate(
      jni$_.JObject aggregateRequest, jni$_.JObject continuation) {
    return _aggregate(aggregateRequest, continuation);
  }

  jni$_.JObject aggregateGroupByDuration(
      jni$_.JObject aggregateGroupByDurationRequest,
      jni$_.JObject continuation) {
    return _aggregateGroupByDuration(
        aggregateGroupByDurationRequest, continuation);
  }

  jni$_.JObject aggregateGroupByPeriod(
      jni$_.JObject aggregateGroupByPeriodRequest, jni$_.JObject continuation) {
    return _aggregateGroupByPeriod(aggregateGroupByPeriodRequest, continuation);
  }

  jni$_.JObject getChangesToken(
      jni$_.JObject changesTokenRequest, jni$_.JObject continuation) {
    return _getChangesToken(changesTokenRequest, continuation);
  }

  jni$_.JObject getChanges(jni$_.JString string, jni$_.JObject continuation) {
    return _getChanges(string, continuation);
  }

  jni$_.JString getHealthConnectSettingsAction() {
    return _getHealthConnectSettingsAction();
  }

  int getSdkStatus(jni$_.JObject context, jni$_.JString string) {
    return _getSdkStatus(context, string);
  }

  HealthConnectClient getOrCreate(jni$_.JObject context, jni$_.JString string) {
    return _getOrCreate(context, string);
  }

  jni$_.JObject getHealthConnectManageDataIntent(
      jni$_.JObject context, jni$_.JString string) {
    return _getHealthConnectManageDataIntent(context, string);
  }

  int getSdkStatus$1(jni$_.JObject context) {
    return _getSdkStatus$1(context);
  }

  HealthConnectClient getOrCreate$1(jni$_.JObject context) {
    return _getOrCreate$1(context);
  }

  jni$_.JObject getHealthConnectManageDataIntent$1(jni$_.JObject context) {
    return _getHealthConnectManageDataIntent$1(context);
  }
}

final class $HealthConnectClient$NullableType
    extends jni$_.JObjType<HealthConnectClient?> {
  @jni$_.internal
  const $HealthConnectClient$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : HealthConnectClient.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$NullableType) &&
        other is $HealthConnectClient$NullableType;
  }
}

final class $HealthConnectClient$Type
    extends jni$_.JObjType<HealthConnectClient> {
  @jni$_.internal
  const $HealthConnectClient$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/HealthConnectClient;';

  @jni$_.internal
  @core$_.override
  HealthConnectClient fromReference(jni$_.JReference reference) =>
      HealthConnectClient.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<HealthConnectClient?> get nullableType =>
      const $HealthConnectClient$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($HealthConnectClient$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($HealthConnectClient$Type) &&
        other is $HealthConnectClient$Type;
  }
}
