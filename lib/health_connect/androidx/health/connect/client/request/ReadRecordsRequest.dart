// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: comment_references
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

import '../records/metadata/DataOrigin.dart' as dataorigin$_;

import '../time/TimeRangeFilter.dart' as timerangefilter$_;

/// from: `androidx.health.connect.client.request.ReadRecordsRequest$Companion`
class ReadRecordsRequest$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ReadRecordsRequest$Companion> $type;

  @jni$_.internal
  ReadRecordsRequest$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/ReadRecordsRequest$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $ReadRecordsRequest$Companion$NullableType();
  static const type = $ReadRecordsRequest$Companion$Type();
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest$Companion(
    jni$_.JObject? defaultConstructorMarker,
  ) {
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest$Companion.fromReference(_new$(
            _class.reference.pointer,
            _id_new$ as jni$_.JMethodIDPtr,
            _$defaultConstructorMarker.pointer)
        .reference);
  }
}

final class $ReadRecordsRequest$Companion$NullableType
    extends jni$_.JObjType<ReadRecordsRequest$Companion?> {
  @jni$_.internal
  const $ReadRecordsRequest$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest$Companion;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ReadRecordsRequest$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ReadRecordsRequest$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$Companion$NullableType) &&
        other is $ReadRecordsRequest$Companion$NullableType;
  }
}

final class $ReadRecordsRequest$Companion$Type
    extends jni$_.JObjType<ReadRecordsRequest$Companion> {
  @jni$_.internal
  const $ReadRecordsRequest$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest$Companion;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest$Companion fromReference(jni$_.JReference reference) =>
      ReadRecordsRequest$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest$Companion?> get nullableType =>
      const $ReadRecordsRequest$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ReadRecordsRequest$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$Companion$Type) &&
        other is $ReadRecordsRequest$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.request.ReadRecordsRequest$DeduplicationStrategy`
class ReadRecordsRequest$DeduplicationStrategy extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ReadRecordsRequest$DeduplicationStrategy> $type;

  @jni$_.internal
  ReadRecordsRequest$DeduplicationStrategy.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/ReadRecordsRequest$DeduplicationStrategy');

  /// The type which includes information such as the signature of this class.
  static const nullableType =
      $ReadRecordsRequest$DeduplicationStrategy$NullableType();
  static const type = $ReadRecordsRequest$DeduplicationStrategy$Type();

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $ReadRecordsRequest$DeduplicationStrategy>
      _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $ReadRecordsRequest$DeduplicationStrategy $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.request.ReadRecordsRequest$DeduplicationStrategy',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory ReadRecordsRequest$DeduplicationStrategy.implement(
    $ReadRecordsRequest$DeduplicationStrategy $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return ReadRecordsRequest$DeduplicationStrategy.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $ReadRecordsRequest$DeduplicationStrategy {
  factory $ReadRecordsRequest$DeduplicationStrategy() =
      _$ReadRecordsRequest$DeduplicationStrategy;
}

final class _$ReadRecordsRequest$DeduplicationStrategy
    with $ReadRecordsRequest$DeduplicationStrategy {
  _$ReadRecordsRequest$DeduplicationStrategy();
}

final class $ReadRecordsRequest$DeduplicationStrategy$NullableType
    extends jni$_.JObjType<ReadRecordsRequest$DeduplicationStrategy?> {
  @jni$_.internal
  const $ReadRecordsRequest$DeduplicationStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest$DeduplicationStrategy;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest$DeduplicationStrategy? fromReference(
          jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ReadRecordsRequest$DeduplicationStrategy.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest$DeduplicationStrategy?> get nullableType =>
      this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode =>
      ($ReadRecordsRequest$DeduplicationStrategy$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ReadRecordsRequest$DeduplicationStrategy$NullableType) &&
        other is $ReadRecordsRequest$DeduplicationStrategy$NullableType;
  }
}

final class $ReadRecordsRequest$DeduplicationStrategy$Type
    extends jni$_.JObjType<ReadRecordsRequest$DeduplicationStrategy> {
  @jni$_.internal
  const $ReadRecordsRequest$DeduplicationStrategy$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest$DeduplicationStrategy;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest$DeduplicationStrategy fromReference(
          jni$_.JReference reference) =>
      ReadRecordsRequest$DeduplicationStrategy.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectNullableType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest$DeduplicationStrategy?> get nullableType =>
      const $ReadRecordsRequest$DeduplicationStrategy$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($ReadRecordsRequest$DeduplicationStrategy$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($ReadRecordsRequest$DeduplicationStrategy$Type) &&
        other is $ReadRecordsRequest$DeduplicationStrategy$Type;
  }
}

/// from: `androidx.health.connect.client.request.ReadRecordsRequest`
class ReadRecordsRequest<$T extends jni$_.JObject> extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<ReadRecordsRequest<$T>> $type;

  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  ReadRecordsRequest.fromReference(
    this.T,
    jni$_.JReference reference,
  )   : $type = type<$T>(T),
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/request/ReadRecordsRequest');

  /// The type which includes information such as the signature of this class.
  static $ReadRecordsRequest$NullableType<$T>
      nullableType<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $ReadRecordsRequest$NullableType<$T>(
      T,
    );
  }

  static $ReadRecordsRequest$Type<$T> type<$T extends jni$_.JObject>(
    jni$_.JObjType<$T> T,
  ) {
    return $ReadRecordsRequest$Type<$T>(
      T,
    );
  }

  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/request/ReadRecordsRequest$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.request.ReadRecordsRequest$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static ReadRecordsRequest$Companion get Companion =>
      _id_Companion.get(_class, const $ReadRecordsRequest$Companion$Type());

  /// from: `static public final int DEDUPLICATION_STRATEGY_DISABLED`
  static const DEDUPLICATION_STRATEGY_DISABLED = 0;

  /// from: `static public final int DEDUPLICATION_STRATEGY_ENABLED_DEFAULT`
  static const DEDUPLICATION_STRATEGY_ENABLED_DEFAULT = 1;

  /// from: `static public final int DEDUPLICATION_STRATEGY_ENABLED_PRIORITIZE_CALLING_APP`
  static const DEDUPLICATION_STRATEGY_ENABLED_PRIORITIZE_CALLING_APP = 2;
  static final _id_new$ = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;I)V',
  );

  static final _new$ = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int)>();

  /// from: `public void <init>(kotlin.reflect.KClass<T> kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> set, boolean z, int i, java.lang.String string, int i1)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest(
    jni$_.JObject kClass,
    timerangefilter$_.TimeRangeFilter timeRangeFilter,
    jni$_.JSet<dataorigin$_.DataOrigin> set,
    bool z,
    int i,
    jni$_.JString? string,
    int i1, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$set = set.reference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$(
                _class.reference.pointer,
                _id_new$ as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer,
                i1)
            .reference);
  }

  static final _id_new$1 = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;IILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string, int i1, int i2, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new$1(
    jni$_.JObject? kClass,
    timerangefilter$_.TimeRangeFilter? timeRangeFilter,
    jni$_.JSet<jni$_.JObject?>? set,
    bool z,
    int i,
    jni$_.JString? string,
    int i1,
    int i2,
    jni$_.JObject? defaultConstructorMarker, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$1(
                _class.reference.pointer,
                _id_new$1 as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer,
                i1,
                i2,
                _$defaultConstructorMarker.pointer)
            .reference);
  }

  static final _id_getRecordType = _class.instanceMethodId(
    r'getRecordType',
    r'()Lkotlin/reflect/KClass;',
  );

  static final _getRecordType = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final kotlin.reflect.KClass<T> getRecordType()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject getRecordType() {
    return _getRecordType(
            reference.pointer, _id_getRecordType as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_getTimeRangeFilter = _class.instanceMethodId(
    r'getTimeRangeFilter',
    r'()Landroidx/health/connect/client/time/TimeRangeFilter;',
  );

  static final _getTimeRangeFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final androidx.health.connect.client.time.TimeRangeFilter getTimeRangeFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  timerangefilter$_.TimeRangeFilter getTimeRangeFilter() {
    return _getTimeRangeFilter(
            reference.pointer, _id_getTimeRangeFilter as jni$_.JMethodIDPtr)
        .object<timerangefilter$_.TimeRangeFilter>(
            const timerangefilter$_.$TimeRangeFilter$Type());
  }

  static final _id_getDataOriginFilter = _class.instanceMethodId(
    r'getDataOriginFilter',
    r'()Ljava/util/Set;',
  );

  static final _getDataOriginFilter = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> getDataOriginFilter()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JSet<dataorigin$_.DataOrigin> getDataOriginFilter() {
    return _getDataOriginFilter(
            reference.pointer, _id_getDataOriginFilter as jni$_.JMethodIDPtr)
        .object<jni$_.JSet<dataorigin$_.DataOrigin>>(
            const jni$_.JSetType<dataorigin$_.DataOrigin>(
                dataorigin$_.$DataOrigin$Type()));
  }

  static final _id_getAscendingOrder = _class.instanceMethodId(
    r'getAscendingOrder',
    r'()Z',
  );

  static final _getAscendingOrder = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final boolean getAscendingOrder()`
  bool getAscendingOrder() {
    return _getAscendingOrder(
            reference.pointer, _id_getAscendingOrder as jni$_.JMethodIDPtr)
        .boolean;
  }

  static final _id_getPageSize = _class.instanceMethodId(
    r'getPageSize',
    r'()I',
  );

  static final _getPageSize = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getPageSize()`
  int getPageSize() {
    return _getPageSize(
            reference.pointer, _id_getPageSize as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_getPageToken = _class.instanceMethodId(
    r'getPageToken',
    r'()Ljava/lang/String;',
  );

  static final _getPageToken = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final java.lang.String getPageToken()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JString? getPageToken() {
    return _getPageToken(
            reference.pointer, _id_getPageToken as jni$_.JMethodIDPtr)
        .object<jni$_.JString?>(const jni$_.JStringNullableType());
  }

  static final _id_getDeduplicateStrategy = _class.instanceMethodId(
    r'getDeduplicateStrategy',
    r'()I',
  );

  static final _getDeduplicateStrategy = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public final int getDeduplicateStrategy()`
  int getDeduplicateStrategy() {
    return _getDeduplicateStrategy(
            reference.pointer, _id_getDeduplicateStrategy as jni$_.JMethodIDPtr)
        .integer;
  }

  static final _id_new$2 = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;)V',
  );

  static final _new$2 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `public void <init>(kotlin.reflect.KClass<T> kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set<androidx.health.connect.client.records.metadata.DataOrigin> set, boolean z, int i, java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new$2(
    jni$_.JObject kClass,
    timerangefilter$_.TimeRangeFilter timeRangeFilter,
    jni$_.JSet<dataorigin$_.DataOrigin> set,
    bool z,
    int i,
    jni$_.JString? string, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass.reference;
    final _$timeRangeFilter = timeRangeFilter.reference;
    final _$set = set.reference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$2(
                _class.reference.pointer,
                _id_new$2 as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer)
            .reference);
  }

  static final _id_new$3 = _class.constructorId(
    r'(Lkotlin/reflect/KClass;Landroidx/health/connect/client/time/TimeRangeFilter;Ljava/util/Set;ZILjava/lang/String;ILkotlin/jvm/internal/DefaultConstructorMarker;)V',
  );

  static final _new$3 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                  jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr,
                  jni$_.VarArgs<
                      (
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>,
                        jni$_.Int32,
                        jni$_.Pointer<jni$_.Void>
                      )>)>>('globalEnv_NewObject')
      .asFunction<
          jni$_.JniResult Function(
              jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              jni$_.Pointer<jni$_.Void>,
              int,
              int,
              jni$_.Pointer<jni$_.Void>,
              int,
              jni$_.Pointer<jni$_.Void>)>();

  /// from: `synthetic public void <init>(kotlin.reflect.KClass kClass, androidx.health.connect.client.time.TimeRangeFilter timeRangeFilter, java.util.Set set, boolean z, int i, java.lang.String string, int i1, kotlin.jvm.internal.DefaultConstructorMarker defaultConstructorMarker)`
  /// The returned object must be released after use, by calling the [release] method.
  factory ReadRecordsRequest.new$3(
    jni$_.JObject? kClass,
    timerangefilter$_.TimeRangeFilter? timeRangeFilter,
    jni$_.JSet<jni$_.JObject?>? set,
    bool z,
    int i,
    jni$_.JString? string,
    int i1,
    jni$_.JObject? defaultConstructorMarker, {
    required jni$_.JObjType<$T> T,
  }) {
    final _$kClass = kClass?.reference ?? jni$_.jNullReference;
    final _$timeRangeFilter =
        timeRangeFilter?.reference ?? jni$_.jNullReference;
    final _$set = set?.reference ?? jni$_.jNullReference;
    final _$string = string?.reference ?? jni$_.jNullReference;
    final _$defaultConstructorMarker =
        defaultConstructorMarker?.reference ?? jni$_.jNullReference;
    return ReadRecordsRequest<$T>.fromReference(
        T,
        _new$3(
                _class.reference.pointer,
                _id_new$3 as jni$_.JMethodIDPtr,
                _$kClass.pointer,
                _$timeRangeFilter.pointer,
                _$set.pointer,
                z ? 1 : 0,
                i,
                _$string.pointer,
                i1,
                _$defaultConstructorMarker.pointer)
            .reference);
  }

  static final _id_equals = _class.instanceMethodId(
    r'equals',
    r'(Ljava/lang/Object;)Z',
  );

  static final _equals = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallBooleanMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public boolean equals(java.lang.Object object)`
  bool equals(
    jni$_.JObject? object,
  ) {
    final _$object = object?.reference ?? jni$_.jNullReference;
    return _equals(reference.pointer, _id_equals as jni$_.JMethodIDPtr,
            _$object.pointer)
        .boolean;
  }

  static final _id_hashCode$1 = _class.instanceMethodId(
    r'hashCode',
    r'()I',
  );

  static final _hashCode$1 = jni$_.ProtectedJniExtensions.lookup<
          jni$_.NativeFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>>('globalEnv_CallIntMethod')
      .asFunction<
          jni$_.JniResult Function(
            jni$_.Pointer<jni$_.Void>,
            jni$_.JMethodIDPtr,
          )>();

  /// from: `public int hashCode()`
  int hashCode$1() {
    return _hashCode$1(reference.pointer, _id_hashCode$1 as jni$_.JMethodIDPtr)
        .integer;
  }
}

final class $ReadRecordsRequest$NullableType<$T extends jni$_.JObject>
    extends jni$_.JObjType<ReadRecordsRequest<$T>?> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $ReadRecordsRequest$NullableType(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest<$T>? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : ReadRecordsRequest<$T>.fromReference(
              T,
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest<$T>?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($ReadRecordsRequest$NullableType, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$NullableType<$T>) &&
        other is $ReadRecordsRequest$NullableType<$T> &&
        T == other.T;
  }
}

final class $ReadRecordsRequest$Type<$T extends jni$_.JObject>
    extends jni$_.JObjType<ReadRecordsRequest<$T>> {
  @jni$_.internal
  final jni$_.JObjType<$T> T;

  @jni$_.internal
  const $ReadRecordsRequest$Type(
    this.T,
  );

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/request/ReadRecordsRequest;';

  @jni$_.internal
  @core$_.override
  ReadRecordsRequest<$T> fromReference(jni$_.JReference reference) =>
      ReadRecordsRequest<$T>.fromReference(
        T,
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<ReadRecordsRequest<$T>?> get nullableType =>
      $ReadRecordsRequest$NullableType<$T>(T);

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => Object.hash($ReadRecordsRequest$Type, T);

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($ReadRecordsRequest$Type<$T>) &&
        other is $ReadRecordsRequest$Type<$T> &&
        T == other.T;
  }
}
