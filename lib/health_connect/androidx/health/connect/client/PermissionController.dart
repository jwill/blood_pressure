// AUTO GENERATED BY JNIGEN 0.14.2. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: argument_type_not_assignable
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: doc_directive_unknown
// ignore_for_file: file_names
// ignore_for_file: inference_failure_on_untyped_parameter
// ignore_for_file: invalid_internal_annotation
// ignore_for_file: invalid_use_of_internal_member
// ignore_for_file: library_prefixes
// ignore_for_file: lines_longer_than_80_chars
// ignore_for_file: no_leading_underscores_for_library_prefixes
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: only_throw_errors
// ignore_for_file: overridden_fields
// ignore_for_file: prefer_double_quotes
// ignore_for_file: unintended_html_in_doc_comment
// ignore_for_file: unnecessary_cast
// ignore_for_file: unnecessary_non_null_assertion
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_local_variable
// ignore_for_file: unused_shown_name
// ignore_for_file: use_super_parameters

import 'dart:core' show Object, String, bool, double, int;
import 'dart:core' as core$_;

import 'package:jni/_internal.dart' as jni$_;
import 'package:jni/jni.dart' as jni$_;

/// from: `androidx.health.connect.client.PermissionController$Companion`
class PermissionController$Companion extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionController$Companion> $type;

  @jni$_.internal
  PermissionController$Companion.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/PermissionController$Companion');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionController$Companion$NullableType();
  static const type = $PermissionController$Companion$Type();
  static final _id_createRequestPermissionResultContract =
      _class.instanceMethodId(
    r'createRequestPermissionResultContract',
    r'(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject createRequestPermissionResultContract(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _createRequestPermissionResultContract(
            reference.pointer,
            _id_createRequestPermissionResultContract as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_createRequestPermissionResultContract$1 =
      _class.instanceMethodId(
    r'createRequestPermissionResultContract',
    r'()Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `public final androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()`
  /// The returned object must be released after use, by calling the [release] method.
  jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1(reference.pointer,
            _id_createRequestPermissionResultContract$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }
}

final class $PermissionController$Companion$NullableType
    extends jni$_.JObjType<PermissionController$Companion?> {
  @jni$_.internal
  const $PermissionController$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController$Companion;';

  @jni$_.internal
  @core$_.override
  PermissionController$Companion? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionController$Companion.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController$Companion?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Companion$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType ==
            ($PermissionController$Companion$NullableType) &&
        other is $PermissionController$Companion$NullableType;
  }
}

final class $PermissionController$Companion$Type
    extends jni$_.JObjType<PermissionController$Companion> {
  @jni$_.internal
  const $PermissionController$Companion$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController$Companion;';

  @jni$_.internal
  @core$_.override
  PermissionController$Companion fromReference(jni$_.JReference reference) =>
      PermissionController$Companion.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController$Companion?> get nullableType =>
      const $PermissionController$Companion$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Companion$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$Companion$Type) &&
        other is $PermissionController$Companion$Type;
  }
}

/// from: `androidx.health.connect.client.PermissionController`
class PermissionController extends jni$_.JObject {
  @jni$_.internal
  @core$_.override
  final jni$_.JObjType<PermissionController> $type;

  @jni$_.internal
  PermissionController.fromReference(
    jni$_.JReference reference,
  )   : $type = type,
        super.fromReference(reference);

  static final _class = jni$_.JClass.forName(
      r'androidx/health/connect/client/PermissionController');

  /// The type which includes information such as the signature of this class.
  static const nullableType = $PermissionController$NullableType();
  static const type = $PermissionController$Type();
  static final _id_Companion = _class.staticFieldId(
    r'Companion',
    r'Landroidx/health/connect/client/PermissionController$Companion;',
  );

  /// from: `static public final androidx.health.connect.client.PermissionController$Companion Companion`
  /// The returned object must be released after use, by calling the [release] method.
  static PermissionController$Companion get Companion =>
      _id_Companion.get(_class, const $PermissionController$Companion$Type());

  static final _id_getGrantedPermissions = _class.instanceMethodId(
    r'getGrantedPermissions',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _getGrantedPermissions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object getGrantedPermissions(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JSet<jni$_.JString>> getGrantedPermissions() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _getGrantedPermissions(
            reference.pointer,
            _id_getGrantedPermissions as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JSetType<jni$_.JString>(jni$_.JStringType()),
        releaseOriginal: true);
  }

  static final _id_revokeAllPermissions = _class.instanceMethodId(
    r'revokeAllPermissions',
    r'(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;',
  );

  static final _revokeAllPermissions = jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                      jni$_.Pointer<jni$_.Void>,
                      jni$_.JMethodIDPtr,
                      jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
          'globalEnv_CallObjectMethod')
      .asFunction<
          jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
              jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `public abstract java.lang.Object revokeAllPermissions(kotlin.coroutines.Continuation continuation)`
  /// The returned object must be released after use, by calling the [release] method.
  core$_.Future<jni$_.JObject> revokeAllPermissions() async {
    final $p = jni$_.ReceivePort();
    final _$continuation = jni$_.ProtectedJniExtensions.newPortContinuation($p);

    final $r = _revokeAllPermissions(
            reference.pointer,
            _id_revokeAllPermissions as jni$_.JMethodIDPtr,
            _$continuation.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
    _$continuation.release();
    final jni$_.JObject $o;
    if ($r.isInstanceOf(jni$_.coroutineSingletonsClass)) {
      $r.release();
      $o = jni$_.JObject.fromReference(
          jni$_.JGlobalReference(jni$_.JObjectPtr.fromAddress(await $p.first)));
      if ($o.isInstanceOf(jni$_.result$FailureClass)) {
        final $e =
            jni$_.failureExceptionField.get($o, const jni$_.JObjectType());
        $o.release();
        jni$_.Jni.throwException($e.reference.toPointer());
      }
    } else {
      $o = $r;
    }
    return $o.as(const jni$_.JObjectType(), releaseOriginal: true);
  }

  static final _id_createRequestPermissionResultContract =
      _class.staticMethodId(
    r'createRequestPermissionResultContract',
    r'(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract =
      jni$_.ProtectedJniExtensions.lookup<
                  jni$_.NativeFunction<
                      jni$_.JniResult Function(
                          jni$_.Pointer<jni$_.Void>,
                          jni$_.JMethodIDPtr,
                          jni$_.VarArgs<(jni$_.Pointer<jni$_.Void>,)>)>>(
              'globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(jni$_.Pointer<jni$_.Void>,
                  jni$_.JMethodIDPtr, jni$_.Pointer<jni$_.Void>)>();

  /// from: `static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract(java.lang.String string)`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject createRequestPermissionResultContract(
    jni$_.JString string,
  ) {
    final _$string = string.reference;
    return _createRequestPermissionResultContract(
            _class.reference.pointer,
            _id_createRequestPermissionResultContract as jni$_.JMethodIDPtr,
            _$string.pointer)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  static final _id_createRequestPermissionResultContract$1 =
      _class.staticMethodId(
    r'createRequestPermissionResultContract',
    r'()Landroidx/activity/result/contract/ActivityResultContract;',
  );

  static final _createRequestPermissionResultContract$1 =
      jni$_.ProtectedJniExtensions.lookup<
              jni$_.NativeFunction<
                  jni$_.JniResult Function(
                    jni$_.Pointer<jni$_.Void>,
                    jni$_.JMethodIDPtr,
                  )>>('globalEnv_CallStaticObjectMethod')
          .asFunction<
              jni$_.JniResult Function(
                jni$_.Pointer<jni$_.Void>,
                jni$_.JMethodIDPtr,
              )>();

  /// from: `static public androidx.activity.result.contract.ActivityResultContract createRequestPermissionResultContract()`
  /// The returned object must be released after use, by calling the [release] method.
  static jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1(_class.reference.pointer,
            _id_createRequestPermissionResultContract$1 as jni$_.JMethodIDPtr)
        .object<jni$_.JObject>(const jni$_.JObjectType());
  }

  /// Maps a specific port to the implemented interface.
  static final core$_.Map<int, $PermissionController> _$impls = {};
  static jni$_.JObjectPtr _$invoke(
    int port,
    jni$_.JObjectPtr descriptor,
    jni$_.JObjectPtr args,
  ) {
    return _$invokeMethod(
      port,
      jni$_.MethodInvocation.fromAddresses(
        0,
        descriptor.address,
        args.address,
      ),
    );
  }

  static final jni$_.Pointer<
          jni$_.NativeFunction<
              jni$_.JObjectPtr Function(
                  jni$_.Int64, jni$_.JObjectPtr, jni$_.JObjectPtr)>>
      _$invokePointer = jni$_.Pointer.fromFunction(_$invoke);

  static jni$_.Pointer<jni$_.Void> _$invokeMethod(
    int $p,
    jni$_.MethodInvocation $i,
  ) {
    try {
      final $d = $i.methodDescriptor.toDartString(releaseOriginal: true);
      final $a = $i.args;
      if ($d ==
          r'getGrantedPermissions(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.getGrantedPermissions(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'revokeAllPermissions(Lkotlin/coroutines/Continuation;)Ljava/lang/Object;') {
        final $r = _$impls[$p]!.revokeAllPermissions(
          $a![0]!.as(const jni$_.JObjectType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'createRequestPermissionResultContract(Ljava/lang/String;)Landroidx/activity/result/contract/ActivityResultContract;') {
        final $r = _$impls[$p]!.createRequestPermissionResultContract(
          $a![0]!.as(const jni$_.JStringType(), releaseOriginal: true),
        );
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
      if ($d ==
          r'createRequestPermissionResultContract()Landroidx/activity/result/contract/ActivityResultContract;') {
        final $r = _$impls[$p]!.createRequestPermissionResultContract$1();
        return ($r as jni$_.JObject?)
                ?.as(const jni$_.JObjectType())
                .reference
                .toPointer() ??
            jni$_.nullptr;
      }
    } catch (e) {
      return jni$_.ProtectedJniExtensions.newDartException(e);
    }
    return jni$_.nullptr;
  }

  static void implementIn(
    jni$_.JImplementer implementer,
    $PermissionController $impl,
  ) {
    late final jni$_.RawReceivePort $p;
    $p = jni$_.RawReceivePort(($m) {
      if ($m == null) {
        _$impls.remove($p.sendPort.nativePort);
        $p.close();
        return;
      }
      final $i = jni$_.MethodInvocation.fromMessage($m);
      final $r = _$invokeMethod($p.sendPort.nativePort, $i);
      jni$_.ProtectedJniExtensions.returnResult($i.result, $r);
    });
    implementer.add(
      r'androidx.health.connect.client.PermissionController',
      $p,
      _$invokePointer,
      [],
    );
    final $a = $p.sendPort.nativePort;
    _$impls[$a] = $impl;
  }

  factory PermissionController.implement(
    $PermissionController $impl,
  ) {
    final $i = jni$_.JImplementer();
    implementIn($i, $impl);
    return PermissionController.fromReference(
      $i.implementReference(),
    );
  }
}

abstract base mixin class $PermissionController {
  factory $PermissionController({
    required jni$_.JObject Function(jni$_.JObject continuation)
        getGrantedPermissions,
    required jni$_.JObject Function(jni$_.JObject continuation)
        revokeAllPermissions,
    required jni$_.JObject Function(jni$_.JString string)
        createRequestPermissionResultContract,
    required jni$_.JObject Function() createRequestPermissionResultContract$1,
  }) = _$PermissionController;

  jni$_.JObject getGrantedPermissions(jni$_.JObject continuation);
  jni$_.JObject revokeAllPermissions(jni$_.JObject continuation);
  jni$_.JObject createRequestPermissionResultContract(jni$_.JString string);
  jni$_.JObject createRequestPermissionResultContract$1();
}

final class _$PermissionController with $PermissionController {
  _$PermissionController({
    required jni$_.JObject Function(jni$_.JObject continuation)
        getGrantedPermissions,
    required jni$_.JObject Function(jni$_.JObject continuation)
        revokeAllPermissions,
    required jni$_.JObject Function(jni$_.JString string)
        createRequestPermissionResultContract,
    required jni$_.JObject Function() createRequestPermissionResultContract$1,
  })  : _getGrantedPermissions = getGrantedPermissions,
        _revokeAllPermissions = revokeAllPermissions,
        _createRequestPermissionResultContract =
            createRequestPermissionResultContract,
        _createRequestPermissionResultContract$1 =
            createRequestPermissionResultContract$1;

  final jni$_.JObject Function(jni$_.JObject continuation)
      _getGrantedPermissions;
  final jni$_.JObject Function(jni$_.JObject continuation)
      _revokeAllPermissions;
  final jni$_.JObject Function(jni$_.JString string)
      _createRequestPermissionResultContract;
  final jni$_.JObject Function() _createRequestPermissionResultContract$1;

  jni$_.JObject getGrantedPermissions(jni$_.JObject continuation) {
    return _getGrantedPermissions(continuation);
  }

  jni$_.JObject revokeAllPermissions(jni$_.JObject continuation) {
    return _revokeAllPermissions(continuation);
  }

  jni$_.JObject createRequestPermissionResultContract(jni$_.JString string) {
    return _createRequestPermissionResultContract(string);
  }

  jni$_.JObject createRequestPermissionResultContract$1() {
    return _createRequestPermissionResultContract$1();
  }
}

final class $PermissionController$NullableType
    extends jni$_.JObjType<PermissionController?> {
  @jni$_.internal
  const $PermissionController$NullableType();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController;';

  @jni$_.internal
  @core$_.override
  PermissionController? fromReference(jni$_.JReference reference) =>
      reference.isNull
          ? null
          : PermissionController.fromReference(
              reference,
            );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController?> get nullableType => this;

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$NullableType).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$NullableType) &&
        other is $PermissionController$NullableType;
  }
}

final class $PermissionController$Type
    extends jni$_.JObjType<PermissionController> {
  @jni$_.internal
  const $PermissionController$Type();

  @jni$_.internal
  @core$_.override
  String get signature =>
      r'Landroidx/health/connect/client/PermissionController;';

  @jni$_.internal
  @core$_.override
  PermissionController fromReference(jni$_.JReference reference) =>
      PermissionController.fromReference(
        reference,
      );
  @jni$_.internal
  @core$_.override
  jni$_.JObjType get superType => const jni$_.JObjectType();

  @jni$_.internal
  @core$_.override
  jni$_.JObjType<PermissionController?> get nullableType =>
      const $PermissionController$NullableType();

  @jni$_.internal
  @core$_.override
  final superCount = 1;

  @core$_.override
  int get hashCode => ($PermissionController$Type).hashCode;

  @core$_.override
  bool operator ==(Object other) {
    return other.runtimeType == ($PermissionController$Type) &&
        other is $PermissionController$Type;
  }
}
